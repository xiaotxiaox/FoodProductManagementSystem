{"remainingRequest":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\overlays\\InfoWindow.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\overlays\\InfoWindow.vue","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\nimport commonMixin from '../base/mixins/common.js';\nimport bindEvents from '../base/bindEvent.js';\nimport { createPoint, createSize } from '../base/factory.js';\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show: function show(val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow();\n    },\n    'position.lng': function positionLng(val, oldVal) {\n      this.reload();\n    },\n    'position.lat': function positionLat(val, oldVal) {\n      this.reload();\n    },\n    'offset.width': function offsetWidth(val, oldVal) {\n      this.reload();\n    },\n    'offset.height': function offsetHeight(val) {\n      this.reload();\n    },\n    maxWidth: function maxWidth() {\n      this.reload();\n    },\n    width: function width(val) {\n      this.originInstance.setWidth(val);\n    },\n    height: function height(val) {\n      this.originInstance.setHeight(val);\n    },\n    title: function title(val) {\n      this.originInstance.setTitle(val);\n    },\n    maximize: function maximize(val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize();\n    },\n    autoPan: function autoPan(val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan();\n    },\n    closeOnClick: function closeOnClick(val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick();\n    }\n  },\n  methods: {\n    redraw: function redraw() {\n      this.originInstance.redraw();\n    },\n    load: function load() {\n      var BMap = this.BMap,\n          map = this.map,\n          show = this.show,\n          title = this.title,\n          width = this.width,\n          height = this.height,\n          maxWidth = this.maxWidth,\n          offset = this.offset,\n          autoPan = this.autoPan,\n          closeOnClick = this.closeOnClick,\n          message = this.message,\n          maximize = this.maximize,\n          bindObserver = this.bindObserver,\n          $parent = this.$parent;\n      var $content = this.$el;\n      var overlay = new BMap.InfoWindow($content, {\n        width: width,\n        height: height,\n        title: title,\n        maxWidth: maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message: message\n      });\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize();\n      bindEvents.call(this, overlay);\n      this.originInstance = overlay;\n      overlay.redraw();\n      [].forEach.call($content.querySelectorAll('img'), function ($img) {\n        $img.onload = function () {\n          return overlay.redraw();\n        };\n      });\n      bindObserver();\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map;\n      show && this.openInfoWindow();\n    },\n    bindObserver: function bindObserver() {\n      var MutationObserver = global.MutationObserver;\n\n      if (!MutationObserver) {\n        return;\n      }\n\n      var $el = this.$el,\n          originInstance = this.originInstance;\n      this.observer = new MutationObserver(function (mutations) {\n        return originInstance.redraw();\n      });\n      this.observer.observe($el, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    },\n    openInfoWindow: function openInfoWindow() {\n      var BMap = this.BMap,\n          $container = this.$container,\n          position = this.position,\n          originInstance = this.originInstance;\n      $container.openInfoWindow(originInstance, createPoint(BMap, position));\n    },\n    closeInfoWindow: function closeInfoWindow() {\n      this.$container.closeInfoWindow(this.originInstance);\n    }\n  }\n};",{"version":3,"sources":["InfoWindow.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div v-show=\"show\">\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createPoint, createSize} from '../base/factory.js'\n\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show (val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow()\n    },\n    'position.lng' (val, oldVal) {\n      this.reload()\n    },\n    'position.lat' (val, oldVal) {\n      this.reload()\n    },\n    'offset.width' (val, oldVal) {\n      this.reload()\n    },\n    'offset.height' (val) {\n      this.reload()\n    },\n    maxWidth () {\n      this.reload()\n    },\n    width (val) {\n      this.originInstance.setWidth(val)\n    },\n    height (val) {\n      this.originInstance.setHeight(val)\n    },\n    title (val) {\n      this.originInstance.setTitle(val)\n    },\n    maximize (val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize()\n    },\n    autoPan (val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan()\n    },\n    closeOnClick (val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick()\n    }\n  },\n  methods: {\n    redraw () {\n      this.originInstance.redraw()\n    },\n    load () {\n      const {BMap, map, show, title, width, height, maxWidth, offset, autoPan, closeOnClick, message, maximize, bindObserver, $parent} = this\n      const $content = this.$el\n      const overlay = new BMap.InfoWindow($content, {\n        width,\n        height,\n        title,\n        maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message\n      })\n\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize()\n      bindEvents.call(this, overlay)\n      this.originInstance = overlay\n      overlay.redraw()\n      ;[].forEach.call($content.querySelectorAll('img'), $img => {\n        $img.onload = () => overlay.redraw()\n      })\n      bindObserver()\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map\n      show && this.openInfoWindow()\n    },\n    bindObserver () {\n      const MutationObserver = global.MutationObserver\n      if (!MutationObserver) {\n        return\n      }\n      const {$el, originInstance} = this\n      this.observer = new MutationObserver(mutations => originInstance.redraw())\n      this.observer.observe($el, {attributes: true, childList: true, characterData: true, subtree: true})\n    },\n    openInfoWindow () {\n      const {BMap, $container, position, originInstance} = this\n      $container.openInfoWindow(originInstance, createPoint(BMap, position))\n    },\n    closeInfoWindow () {\n      this.$container.closeInfoWindow(this.originInstance)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-baidu-map/components/overlays"}]}