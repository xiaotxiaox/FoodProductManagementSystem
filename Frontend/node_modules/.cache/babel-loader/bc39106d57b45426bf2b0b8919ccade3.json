{"remainingRequest":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\FoodProductManagementSystem\\Frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\FoodProductManagementSystem\\Frontend\\src\\utils\\fetch.js","dependencies":[{"path":"E:\\FoodProductManagementSystem\\Frontend\\src\\utils\\fetch.js","mtime":1557660160384},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"E:\\\\FoodProductManagementSystem\\\\Frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport _JSON$stringify from \"E:\\\\FoodProductManagementSystem\\\\Frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport 'whatwg-fetch';\nimport notification from 'ant-design-vue/es/notification';\nimport { getCookie } from './util';\nvar BASE_URL = '/api/';\n/**\r\n * 封装fetch\r\n * @param url api url\r\n * @param method get/post/put/delete\r\n * @param data data to be json\r\n * @param params urlencoded\r\n * @returns {Promise<Response>}\r\n */\n\nexport default function fetchAPI(url, method) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var body = null; // csrf\n\n  var headers = {\n    'Content-Type': 'application/json'\n  };\n\n  if (!/^(GET|HEAD|OPTIONS|TRACE)$/.test(method.toUpperCase())) {\n    headers['X-CSRFToken'] = getCookie('csrftoken');\n  }\n\n  if (data) {\n    body = _JSON$stringify(data);\n  }\n\n  if (params) {\n    url += '?' + new URLSearchParams(params).toString();\n  }\n\n  return new _Promise(function (resolve, reject) {\n    fetch(BASE_URL + url, {\n      credentials: 'include',\n      headers: headers,\n      method: method,\n      body: body\n    }).then(function (res) {\n      if (res.status === 204) {\n        return res.text();\n      } else if (res.status === 400) {\n        return res.json();\n      } else if (res.status === 404) {\n        return res.json();\n      } else if (res.ok) {\n        return res.json();\n      } else {\n        throw \"\".concat(res.status, \", \").concat(res.statusText);\n      }\n    }).then(function (data) {\n      if (!data.detail) {\n        resolve(data);\n      } else {\n        notification.error({\n          message: '错误',\n          description: _JSON$stringify(data.detail),\n          key: 'ERROR'\n        });\n      }\n    }).catch(function (error) {\n      notification.error({\n        message: '错误',\n        description: error,\n        key: 'ERROR'\n      });\n    });\n  });\n}",{"version":3,"sources":["E:\\FoodProductManagementSystem\\Frontend\\src\\utils\\fetch.js"],"names":["notification","getCookie","BASE_URL","fetchAPI","url","method","data","params","body","headers","test","toUpperCase","URLSearchParams","toString","resolve","reject","fetch","credentials","then","res","status","text","json","ok","statusText","detail","error","message","description","key","catch"],"mappings":";;;;AAAA,OAAO,cAAP;AACA,OAAOA,YAAP,MAAyB,gCAAzB;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,IAAMC,QAAQ,GAAG,OAAjB;AAEA;;;;;;;;;AAQA,eAAe,SAASC,QAAT,CAAmBC,GAAnB,EAAwBC,MAAxB,EAA4D;AAAA,MAA5BC,IAA4B,uEAArB,IAAqB;AAAA,MAAfC,MAAe,uEAAN,IAAM;AACzE,MAAIC,IAAI,GAAG,IAAX,CADyE,CAEzE;;AACA,MAAIC,OAAO,GAAG;AACZ,oBAAgB;AADJ,GAAd;;AAGA,MAAI,CAAC,6BAA6BC,IAA7B,CAAkCL,MAAM,CAACM,WAAP,EAAlC,CAAL,EAA8D;AAC5DF,IAAAA,OAAO,CAAC,aAAD,CAAP,GAAyBR,SAAS,CAAC,WAAD,CAAlC;AACD;;AACD,MAAIK,IAAJ,EAAU;AACRE,IAAAA,IAAI,GAAG,gBAAeF,IAAf,CAAP;AACD;;AACD,MAAIC,MAAJ,EAAY;AACVH,IAAAA,GAAG,IAAI,MAAO,IAAIQ,eAAJ,CAAoBL,MAApB,CAAD,CAA8BM,QAA9B,EAAb;AACD;;AACD,SAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,IAAAA,KAAK,CAACd,QAAQ,GAAGE,GAAZ,EAAiB;AACpBa,MAAAA,WAAW,EAAE,SADO;AAEpBR,MAAAA,OAAO,EAAEA,OAFW;AAGpBJ,MAAAA,MAAM,EAAEA,MAHY;AAIpBG,MAAAA,IAAI,EAAEA;AAJc,KAAjB,CAAL,CAMGU,IANH,CAMQ,UAAAC,GAAG,EAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,OAFD,MAEO,IAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AAC7B,eAAOD,GAAG,CAACG,IAAJ,EAAP;AACD,OAFM,MAEA,IAAIH,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AAC7B,eAAOD,GAAG,CAACG,IAAJ,EAAP;AACD,OAFM,MAEA,IAAIH,GAAG,CAACI,EAAR,EAAY;AACjB,eAAOJ,GAAG,CAACG,IAAJ,EAAP;AACD,OAFM,MAEA;AACL,wBAASH,GAAG,CAACC,MAAb,eAAwBD,GAAG,CAACK,UAA5B;AACD;AACF,KAlBH,EAmBGN,IAnBH,CAmBQ,UAAAZ,IAAI,EAAI;AACZ,UAAI,CAACA,IAAI,CAACmB,MAAV,EAAkB;AAChBX,QAAAA,OAAO,CAACR,IAAD,CAAP;AACD,OAFD,MAEO;AACLN,QAAAA,YAAY,CAAC0B,KAAb,CAAmB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,WAAW,EAAE,gBAAetB,IAAI,CAACmB,MAApB,CAA9B;AAA2DI,UAAAA,GAAG,EAAE;AAAhE,SAAnB;AACD;AACF,KAzBH,EA0BGC,KA1BH,CA0BS,UAAAJ,KAAK,EAAI;AACd1B,MAAAA,YAAY,CAAC0B,KAAb,CAAmB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,WAAW,EAAEF,KAA9B;AAAqCG,QAAAA,GAAG,EAAE;AAA1C,OAAnB;AACD,KA5BH;AA6BD,GA9BM,CAAP;AA+BD","sourcesContent":["import 'whatwg-fetch'\r\nimport notification from 'ant-design-vue/es/notification'\r\nimport { getCookie } from './util'\r\n\r\nconst BASE_URL = '/api/'\r\n\r\n/**\r\n * 封装fetch\r\n * @param url api url\r\n * @param method get/post/put/delete\r\n * @param data data to be json\r\n * @param params urlencoded\r\n * @returns {Promise<Response>}\r\n */\r\nexport default function fetchAPI (url, method, data = null, params = null) {\r\n  let body = null\r\n  // csrf\r\n  let headers = {\r\n    'Content-Type': 'application/json'\r\n  }\r\n  if (!/^(GET|HEAD|OPTIONS|TRACE)$/.test(method.toUpperCase())) {\r\n    headers['X-CSRFToken'] = getCookie('csrftoken')\r\n  }\r\n  if (data) {\r\n    body = JSON.stringify(data)\r\n  }\r\n  if (params) {\r\n    url += '?' + (new URLSearchParams(params)).toString()\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    fetch(BASE_URL + url, {\r\n      credentials: 'include',\r\n      headers: headers,\r\n      method: method,\r\n      body: body\r\n    })\r\n      .then(res => {\r\n        if (res.status === 204) {\r\n          return res.text()\r\n        } else if (res.status === 400) {\r\n          return res.json()\r\n        } else if (res.status === 404) {\r\n          return res.json()\r\n        } else if (res.ok) {\r\n          return res.json()\r\n        } else {\r\n          throw `${res.status}, ${res.statusText}`\r\n        }\r\n      })\r\n      .then(data => {\r\n        if (!data.detail) {\r\n          resolve(data)\r\n        } else {\r\n          notification.error({ message: '错误', description: JSON.stringify(data.detail), key: 'ERROR' })\r\n        }\r\n      })\r\n      .catch(error => {\r\n        notification.error({ message: '错误', description: error, key: 'ERROR' })\r\n      })\r\n  })\r\n}"]}]}