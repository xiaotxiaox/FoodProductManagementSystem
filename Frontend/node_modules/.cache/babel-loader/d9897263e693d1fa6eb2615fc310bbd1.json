{"remainingRequest":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\controls\\MapType.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\controls\\MapType.vue","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.anchor\";\nimport commonMixin from '../base/mixins/common.js';\nimport { createSize } from '../base/factory.js';\nexport default {\n  name: 'bm-map-type',\n  render: function render() {},\n  mixins: [commonMixin('control')],\n  props: ['type', 'mapTypes', 'anchor', 'offset'],\n  watch: {\n    anchor: function anchor() {\n      this.reload();\n    },\n    offset: function offset() {\n      this.reload();\n    },\n    type: function type() {\n      this.reload();\n    },\n    mapTypes: function mapTypes() {\n      this.reload();\n    }\n  },\n  methods: {\n    load: function load() {\n      var BMap = this.BMap,\n          map = this.map,\n          anchor = this.anchor,\n          offset = this.offset,\n          type = this.type;\n      var mapTypes = [];\n      this.mapTypes && this.mapTypes.forEach(function (item) {\n        return mapTypes.push(global[item]);\n      });\n      this.originInstance = new BMap.MapTypeControl({\n        anchor: global[anchor],\n        offset: offset && createSize(BMap, offset),\n        type: global[type],\n        mapTypes: mapTypes\n      });\n      map.addControl(this.originInstance);\n    }\n  }\n};",{"version":3,"sources":["MapType.vue"],"names":[],"mappings":";AACA,OAAA,WAAA,MAAA,0BAAA;AACA,SAAA,UAAA,QAAA,oBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,MAFA,oBAEA,CAAA,CAFA;AAGA,EAAA,MAAA,EAAA,CAAA,WAAA,CAAA,SAAA,CAAA,CAHA;AAIA,EAAA,KAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAA,QAAA,CAJA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,oBACA;AACA,WAAA,MAAA;AACA,KAHA;AAIA,IAAA,MAJA,oBAIA;AACA,WAAA,MAAA;AACA,KANA;AAOA,IAAA,IAPA,kBAOA;AACA,WAAA,MAAA;AACA,KATA;AAUA,IAAA,QAVA,sBAUA;AACA,WAAA,MAAA;AACA;AAZA,GALA;AAmBA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AAAA,UACA,IADA,GACA,IADA,CACA,IADA;AAAA,UACA,GADA,GACA,IADA,CACA,GADA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAAA,UACA,IADA,GACA,IADA,CACA,IADA;AAEA,UAAA,QAAA,GAAA,EAAA;AACA,WAAA,QAAA,IAAA,KAAA,QAAA,CAAA,OAAA,CAAA,UAAA,IAAA;AAAA,eAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AAAA,OAAA,CAAA;AACA,WAAA,cAAA,GAAA,IAAA,IAAA,CAAA,cAAA,CAAA;AACA,QAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CADA;AAEA,QAAA,MAAA,EAAA,MAAA,IAAA,UAAA,CAAA,IAAA,EAAA,MAAA,CAFA;AAGA,QAAA,IAAA,EAAA,MAAA,CAAA,IAAA,CAHA;AAIA,QAAA,QAAA,EAAA;AAJA,OAAA,CAAA;AAMA,MAAA,GAAA,CAAA,UAAA,CAAA,KAAA,cAAA;AACA;AAZA;AAnBA,CAAA","sourcesContent":["<script>\nimport commonMixin from '../base/mixins/common.js'\nimport {createSize} from '../base/factory.js'\n\nexport default {\n  name: 'bm-map-type',\n  render () {},\n  mixins: [commonMixin('control')],\n  props: ['type', 'mapTypes', 'anchor', 'offset'],\n  watch: {\n    anchor () {\n      this.reload()\n    },\n    offset () {\n      this.reload()\n    },\n    type () {\n      this.reload()\n    },\n    mapTypes () {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, anchor, offset, type} = this\n      const mapTypes = []\n      this.mapTypes && this.mapTypes.forEach(item => mapTypes.push(global[item]))\n      this.originInstance = new BMap.MapTypeControl({\n        anchor: global[anchor],\n        offset: offset && createSize(BMap, offset),\n        type: global[type],\n        mapTypes\n      })\n      map.addControl(this.originInstance)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-baidu-map/components/controls"}]}