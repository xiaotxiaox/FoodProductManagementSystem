{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\others\\AutoComplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\others\\AutoComplete.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport _getIterator from \"E:\\\\\\u9879\\u76EE\\\\FoodProductManageSystem\\\\Frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport commonMixin from '../base/mixins/common.js';\nimport bindEvents from '../base/bindEvent.js';\nexport default {\n  name: 'bm-autocomplete',\n  mixins: [commonMixin()],\n  props: {\n    types: {\n      type: String\n    },\n    location: {\n      type: String\n    },\n    sugStyle: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  watch: {\n    types: function types() {\n      this.reload();\n    },\n    location: function location() {\n      this.reload();\n    }\n  },\n  methods: {\n    load: function load() {\n      var _this = this;\n\n      var BMap = this.BMap,\n          map = this.map,\n          $el = this.$el,\n          types = this.types,\n          location = this.location,\n          sugStyle = this.sugStyle;\n      var input = $el.querySelector('input');\n\n      if (!input) {\n        return;\n      }\n\n      this.originInstance = new BMap.Autocomplete({\n        input: input,\n        types: types,\n        location: location || map,\n        onSearchComplete: function onSearchComplete(e) {\n          var $sugs = document.querySelectorAll('.tangram-suggestion-main');\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = _getIterator($sugs), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var $sug = _step.value;\n\n              for (var name in sugStyle) {\n                $sug.style[name] = sugStyle[name].toString();\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          _this.$emit('searchcomplete', e);\n        }\n      }); // Support v-model\n\n      this.originInstance.addEventListener('onconfirm', function (e) {\n        var val = e.item.value;\n\n        _this.$emit('input', val.province + val.city + val.district + val.street + val.business);\n      });\n      bindEvents.call(this, this.originInstance);\n    }\n  }\n};",{"version":3,"sources":["AutoComplete.vue"],"names":[],"mappings":";;;;;;;;;;;;AASA,OAAA,WAAA,MAAA,0BAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,MAAA,EAAA,CAAA,WAAA,EAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KADA;AAIA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KAJA;AAOA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,EAAA;AACA;AAJA;AAPA,GAHA;AAiBA,EAAA,KAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,WAAA,MAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AACA,WAAA,MAAA;AACA;AANA,GAjBA;AAyBA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AAAA;;AAAA,UACA,IADA,GACA,IADA,CACA,IADA;AAAA,UACA,GADA,GACA,IADA,CACA,GADA;AAAA,UACA,GADA,GACA,IADA,CACA,GADA;AAAA,UACA,KADA,GACA,IADA,CACA,KADA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAEA,UAAA,KAAA,GAAA,GAAA,CAAA,aAAA,CAAA,OAAA,CAAA;;AACA,UAAA,CAAA,KAAA,EAAA;AACA;AACA;;AACA,WAAA,cAAA,GAAA,IAAA,IAAA,CAAA,YAAA,CAAA;AACA,QAAA,KAAA,EAAA,KADA;AAEA,QAAA,KAAA,EAAA,KAFA;AAGA,QAAA,QAAA,EAAA,QAAA,IAAA,GAHA;AAIA,QAAA,gBAAA,EAAA,0BAAA,CAAA,EAAA;AACA,cAAA,KAAA,GAAA,QAAA,CAAA,gBAAA,CAAA,0BAAA,CAAA;AADA;AAAA;AAAA;;AAAA;AAEA,8CAAA,KAAA,4GAAA;AAAA,kBAAA,IAAA;;AACA,mBAAA,IAAA,IAAA,IAAA,QAAA,EAAA;AACA,gBAAA,IAAA,CAAA,KAAA,CAAA,IAAA,IAAA,QAAA,CAAA,IAAA,CAAA,CAAA,QAAA,EAAA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,UAAA,KAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA;AAZA,OAAA,CAAA,CANA,CAqBA;;AACA,WAAA,cAAA,CAAA,gBAAA,CAAA,WAAA,EAAA,UAAA,CAAA,EAAA;AACA,YAAA,GAAA,GAAA,CAAA,CAAA,IAAA,CAAA,KAAA;;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,GAAA,CAAA,QAAA,GAAA,GAAA,CAAA,IAAA,GAAA,GAAA,CAAA,QAAA,GAAA,GAAA,CAAA,MAAA,GAAA,GAAA,CAAA,QAAA;AACA,OAHA;AAKA,MAAA,UAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,cAAA;AACA;AA7BA;AAzBA,CAAA","sourcesContent":["<template>\n<span>\n  <slot>\n    <input>\n  </slot>\n</span>\n</template>\n\n<script>\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\n\nexport default {\n  name: 'bm-autocomplete',\n  mixins: [commonMixin()],\n  props: {\n    types: {\n      type: String\n    },\n    location: {\n      type: String\n    },\n    sugStyle: {\n      type: Object,\n      default () {\n        return {}\n      }\n    }\n  },\n  watch: {\n    types () {\n      this.reload()\n    },\n    location () {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, $el, types, location, sugStyle} = this\n      const input = $el.querySelector('input')\n      if (!input) {\n        return\n      }\n      this.originInstance = new BMap.Autocomplete({\n        input,\n        types,\n        location: location || map,\n        onSearchComplete: e => {\n          const $sugs = document.querySelectorAll('.tangram-suggestion-main')\n          for (const $sug of $sugs) {\n            for (const name in sugStyle) {\n              $sug.style[name] = sugStyle[name].toString()\n            }\n          }\n          this.$emit('searchcomplete', e)\n        }\n      })\n\n      // Support v-model\n      this.originInstance.addEventListener('onconfirm', e => {\n        const val = e.item.value\n        this.$emit('input', val.province + val.city + val.district + val.street + val.business)\n      })\n\n      bindEvents.call(this, this.originInstance)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-baidu-map/components/others"}]}