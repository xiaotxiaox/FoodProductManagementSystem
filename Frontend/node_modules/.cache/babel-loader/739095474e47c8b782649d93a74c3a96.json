{"remainingRequest":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ConstructionConsultationSystem\\Frontend\\src\\components\\Ellipsis\\Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ConstructionConsultationSystem\\Frontend\\src\\components\\Ellipsis\\Ellipsis.vue","mtime":1553931799753},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport Tooltip from 'ant-design-vue/es/tooltip';\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/StringUtil';\n/*\r\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\r\n\r\n    const TooltipOverlayStyle = {\r\n      overflowWrap: 'break-word',\r\n      wordWrap: 'break-word',\r\n    };\r\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip: Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom: function getStrDom(str, fullLength) {\n      var h = this.$createElement;\n      return h(\"span\", [cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '')]);\n    },\n    getTooltip: function getTooltip(fullStr, fullLength) {\n      var h = this.$createElement;\n      return h(Tooltip, [h(\"template\", {\n        \"slot\": \"title\"\n      }, [fullStr]), this.getStrDom(fullStr, fullLength)]);\n    }\n  },\n  render: function render() {\n    var _this$$props = this.$props,\n        tooltip = _this$$props.tooltip,\n        length = _this$$props.length;\n    var str = this.$slots.default.map(function (vNode) {\n      return vNode.text;\n    }).join('');\n    var fullLength = getStrFullLength(str);\n    var strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength);\n    return strDom;\n  }\n};",{"version":3,"sources":["Ellipsis.vue"],"names":[],"mappings":";AACA,OAAA,OAAA,MAAA,2BAAA;AACA,SAAA,kBAAA,EAAA,gBAAA,QAAA,+BAAA;AACA;;;;;;;;;AASA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KALA;AAQA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KARA;AAYA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAZA;AAgBA,IAAA,oBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAhBA,GALA;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,GADA,EACA,UADA,EACA;AAAA;AACA,wBACA,kBAAA,CAAA,GAAA,EAAA,KAAA,MAAA,CAAA,IAAA,UAAA,GAAA,KAAA,MAAA,GAAA,KAAA,GAAA,EAAA,CADA;AAGA,KALA;AAMA,IAAA,UANA,sBAMA,OANA,EAMA,UANA,EAMA;AAAA;AACA;AAAA,gBAEA;AAFA,UAEA,OAFA,IAGA,KAAA,SAAA,CAAA,OAAA,EAAA,UAAA,CAHA;AAMA;AAbA,GA1BA;AAyCA,EAAA,MAzCA,oBAyCA;AAAA,uBACA,KAAA,MADA;AAAA,QACA,OADA,gBACA,OADA;AAAA,QACA,MADA,gBACA,MADA;AAEA,QAAA,GAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,KAAA;AAAA,aAAA,KAAA,CAAA,IAAA;AAAA,KAAA,EAAA,IAAA,CAAA,EAAA,CAAA;AACA,QAAA,UAAA,GAAA,gBAAA,CAAA,GAAA,CAAA;AACA,QAAA,MAAA,GAAA,OAAA,IAAA,UAAA,GAAA,MAAA,GAAA,KAAA,UAAA,CAAA,GAAA,EAAA,UAAA,CAAA,GAAA,KAAA,SAAA,CAAA,GAAA,EAAA,UAAA,CAAA;AACA,WACA,MADA;AAGA;AAjDA,CAAA","sourcesContent":["<script>\r\nimport Tooltip from 'ant-design-vue/es/tooltip'\r\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/StringUtil'\r\n/*\r\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\r\n\r\n    const TooltipOverlayStyle = {\r\n      overflowWrap: 'break-word',\r\n      wordWrap: 'break-word',\r\n    };\r\n  */\r\n\r\nexport default {\r\n  name: 'Ellipsis',\r\n  components: {\r\n    Tooltip\r\n  },\r\n  props: {\r\n    prefixCls: {\r\n      type: String,\r\n      default: 'ant-pro-ellipsis'\r\n    },\r\n    tooltip: {\r\n      type: Boolean\r\n    },\r\n    length: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    lines: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    fullWidthRecognition: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  methods: {\r\n    getStrDom (str, fullLength) {\r\n      return (\r\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\r\n      )\r\n    },\r\n    getTooltip (fullStr, fullLength) {\r\n      return (\r\n        <Tooltip>\r\n          <template slot=\"title\">{ fullStr }</template>\r\n          { this.getStrDom(fullStr, fullLength) }\r\n        </Tooltip>\r\n      )\r\n    }\r\n  },\r\n  render () {\r\n    const { tooltip, length } = this.$props\r\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\r\n    const fullLength = getStrFullLength(str)\r\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\r\n    return (\r\n      strDom\r\n    )\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src/components/Ellipsis"}]}