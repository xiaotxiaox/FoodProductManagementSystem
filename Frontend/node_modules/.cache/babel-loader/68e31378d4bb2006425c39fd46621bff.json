{"remainingRequest":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\node\\node.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\node\\node.vue","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"E:\\\\ConstructionConsultationSystem\\\\Frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport mixinsTool from '../../mixins/tool';\nvar prefixCls = 'task-node';\nexport default {\n  name: 'Node',\n  mixins: [mixinsTool],\n  data: function data() {\n    return {\n      store: null\n    };\n  },\n  props: {\n    width: {\n      type: [String, Number],\n      default: 0\n    },\n    height: {\n      type: [String, Number],\n      default: 0\n    },\n    node: {\n      id: [String, Number],\n      positionX: {\n        type: [String, Number],\n        default: 0\n      },\n      positionY: {\n        type: [String, Number],\n        default: 0\n      }\n    }\n  },\n  computed: {\n    classes: function classes() {\n      return [\"\".concat(prefixCls)];\n    }\n  },\n  methods: {\n    getCheckX: function getCheckX(X) {\n      // 检查是否移出工作区\n      var me = this;\n      var x = X;\n\n      if (x <= 0) {\n        x = 0;\n        me.node.positionX = x;\n      } else if (x >= me.getBrowserHW().width) {\n        x = me.getBrowserHW().width - me.width;\n        me.node.positionX = x;\n      }\n\n      return x;\n    },\n    getCheckY: function getCheckY(Y) {\n      // 检查是否移出工作区\n      var me = this;\n      var y = Y;\n\n      if (y <= 0) {\n        y = 0;\n        me.node.positionY = y;\n      } else if (y >= me.getBrowserHW().height) {\n        y = me.getBrowserHW().height - me.height;\n        me.node.positionY = y;\n      }\n\n      return y;\n    },\n    dragStart: function dragStart(event) {\n      event.dataTransfer.setData('nodedata', _JSON$stringify(this.node));\n      this.$emit('on-drag-start', event, this.node);\n    },\n    dragGing: function dragGing(event) {\n      this.$emit('on-drag-ging', event);\n    },\n    dragEnd: function dragEnd(event, node) {\n      this.$emit('on-drag-end', event, node);\n    },\n    mouseMenu: function mouseMenu(event) {\n      event.stopPropagation();\n      this.$emit('on-mouse', event, this.node);\n    },\n    selectNodeMethod: function selectNodeMethod(event, node, ref) {\n      this.$emit('on-select', event, node, ref);\n    }\n  },\n  updated: function updated() {\n    this.$emit('updateTem', 'VDom加载完成！');\n  }\n};",{"version":3,"sources":["node.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <g :transform=\"'translate('+getCheckX(node.positionX)+','+getCheckY(node.positionY)+')'\" :class=\"classes\">\n    <g transform=\"scale(1,1)\" class=\"pane-scalable\">\n      <foreignObject :width=\"width\" :height=\"height\">\n        <body xmlns=\"http://www.w3.org/1999/xhtml\">\n            <div @click=selectNodeMethod($event,node,$refs.node) ref=\"node\" draggable=\"true\" @drag='dragGing($event)' @dragstart='dragStart($event)' @dragend=\"dragEnd($event,node)\" @contextmenu.prevent=\"mouseMenu\">\n              <slot></slot>\n            </div>\n        </body>\n      </foreignObject>\n    </g>\n  </g>\n</template>\n<script>\nimport mixinsTool from '../../mixins/tool'\nconst prefixCls = 'task-node'\nexport default {\n  name: 'Node',\n  mixins: [ mixinsTool ],\n  data () {\n    return {\n      store: null\n    }\n  },\n  props: {\n    width: {\n      type: [String, Number],\n      default: 0\n    },\n    height: {\n      type: [String, Number],\n      default: 0\n    },\n    node: {\n      id: [String, Number],\n      positionX: {\n        type: [String, Number],\n        default: 0\n      },\n      positionY: {\n        type: [String, Number],\n        default: 0\n      }\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`\n      ]\n    }\n  },\n  methods: {\n    getCheckX (X) { // 检查是否移出工作区\n      let me = this\n      let x = X\n      if (x <= 0) {\n        x = 0\n        me.node.positionX = x\n      } else if (x >= me.getBrowserHW().width) {\n        x = me.getBrowserHW().width - me.width\n        me.node.positionX = x\n      }\n      return x\n    },\n    getCheckY (Y) { // 检查是否移出工作区\n      let me = this\n      let y = Y\n      if (y <= 0) {\n        y = 0\n        me.node.positionY = y\n      } else if (y >= me.getBrowserHW().height) {\n        y = me.getBrowserHW().height - me.height\n        me.node.positionY = y\n      }\n      return y\n    },\n    dragStart: function (event) {\n      event.dataTransfer.setData('nodedata', JSON.stringify(this.node))\n      this.$emit('on-drag-start', event, this.node)\n    },\n    dragGing: function (event) {\n      this.$emit('on-drag-ging', event)\n    },\n    dragEnd: function (event, node) {\n      this.$emit('on-drag-end', event, node)\n    },\n    mouseMenu: function (event) {\n      event.stopPropagation()\n      this.$emit('on-mouse', event, this.node)\n    },\n    selectNodeMethod: function (event, node, ref) {\n      this.$emit('on-select', event, node, ref)\n    }\n  },\n  updated: function () {\n    this.$emit('updateTem', 'VDom加载完成！')\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-task-node/src/lib/components/node"}]}