{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\path\\curvepath.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\path\\curvepath.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TLine from './tline.vue'\n\nexport default {\n  components: {TLine},\n  name: 'CurvePath',\n  props: {\n    paths: {\n      type: Array\n    },\n    areaid: [String, Number]\n  },\n  data () {\n    return {\n      con: []\n    }\n  },\n  watch: {\n    paths (newData, oldData) {\n      this.vReload()\n    }\n  },\n  computed: {\n    path: function () {\n      let pa = this.$store.getters.getViPathingData\n      let isShow = pa.isShow\n      if (pa.Mxy) {\n        pa = this.computeXY(pa.Mxy, pa.Txy, true)\n      }\n      pa.isShow = isShow\n      pa.dotted = this.$store.getters.getViConfig.isDotted\n      pa.ptype = this.$store.getters.getViConfig.lineType\n      return pa\n    }\n  },\n  mounted: function () {\n    this.vReload()\n  },\n  methods: {\n    vReload () {\n      let me = this\n      this.con = []\n      this.paths.forEach((o) => {\n        let vstart = document.getElementById(o.startPort)\n        let vend = document.getElementById(o.endPort)\n        if (vend && vstart) {\n          let obj = me.computeXY(vstart, vend, false)\n          if (o.dotted) {\n            obj.dotted = o.dotted\n          }\n          if (o.ptype) {\n            obj.ptype = o.ptype\n          }\n          obj.startPort = o.startPort\n          obj.endPort = o.endPort\n          me.con.push(obj)\n        }\n      })\n    },\n    computeXY (vstart, vend, isBing) {\n      let area = document.getElementById(this.areaid)\n      let scaling = this.$store.getters.getViConfig.scaling\n      let obj = {}\n      if (isBing) {\n        obj = {\n          Mxy: {\n            x: vstart.x - area.getBoundingClientRect().left,\n            y: vstart.y - area.getBoundingClientRect().top\n          },\n          Txy: {\n            x: vend.x - area.getBoundingClientRect().left,\n            y: vend.y - area.getBoundingClientRect().top\n          }\n        }\n      } else {\n        obj = {\n          Mxy: {\n            x: vstart.getBoundingClientRect().left - area.getBoundingClientRect().left + (5 * scaling.ZoomX),\n            y: vstart.getBoundingClientRect().top - area.getBoundingClientRect().top + (5 * scaling.ZoomY)\n          },\n          Txy: {\n            x: vend.getBoundingClientRect().left - area.getBoundingClientRect().left + (4 * scaling.ZoomX),\n            y: vend.getBoundingClientRect().top - area.getBoundingClientRect().top + 0\n          }\n        }\n      }\n      return obj\n    },\n    mouseFn (event, portData) {\n      this.$emit('on-mouse', event, portData)\n    },\n    mouseOverFn (event, portData) {\n      this.$emit('on-mouse-over', event, portData)\n    },\n    mouseOutFn (event, portData) {\n      this.$emit('on-mouse-out', event, portData)\n    }\n  }\n}\n",{"version":3,"sources":["curvepath.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"curvepath.vue","sourceRoot":"node_modules/vue-task-node/src/lib/components/path","sourcesContent":["<template>\n  <g ref=\"gss\">\n    <template v-if=\"con.length > 0\" v-for=\"(item,index) in con\">\n      <t-line :key=\"index\" :portData=\"item\" v-on:on-mouse=\"mouseFn\" v-on:on-mouse-over=\"mouseOverFn\" v-on:on-mouse-out=\"mouseOutFn\">\n      </t-line>\n    </template>\n      <t-line v-if=\"path.isShow\" :portData=\"path\">\n      </t-line>\n  </g>\n</template>\n<script>\nimport TLine from './tline.vue'\n\nexport default {\n  components: {TLine},\n  name: 'CurvePath',\n  props: {\n    paths: {\n      type: Array\n    },\n    areaid: [String, Number]\n  },\n  data () {\n    return {\n      con: []\n    }\n  },\n  watch: {\n    paths (newData, oldData) {\n      this.vReload()\n    }\n  },\n  computed: {\n    path: function () {\n      let pa = this.$store.getters.getViPathingData\n      let isShow = pa.isShow\n      if (pa.Mxy) {\n        pa = this.computeXY(pa.Mxy, pa.Txy, true)\n      }\n      pa.isShow = isShow\n      pa.dotted = this.$store.getters.getViConfig.isDotted\n      pa.ptype = this.$store.getters.getViConfig.lineType\n      return pa\n    }\n  },\n  mounted: function () {\n    this.vReload()\n  },\n  methods: {\n    vReload () {\n      let me = this\n      this.con = []\n      this.paths.forEach((o) => {\n        let vstart = document.getElementById(o.startPort)\n        let vend = document.getElementById(o.endPort)\n        if (vend && vstart) {\n          let obj = me.computeXY(vstart, vend, false)\n          if (o.dotted) {\n            obj.dotted = o.dotted\n          }\n          if (o.ptype) {\n            obj.ptype = o.ptype\n          }\n          obj.startPort = o.startPort\n          obj.endPort = o.endPort\n          me.con.push(obj)\n        }\n      })\n    },\n    computeXY (vstart, vend, isBing) {\n      let area = document.getElementById(this.areaid)\n      let scaling = this.$store.getters.getViConfig.scaling\n      let obj = {}\n      if (isBing) {\n        obj = {\n          Mxy: {\n            x: vstart.x - area.getBoundingClientRect().left,\n            y: vstart.y - area.getBoundingClientRect().top\n          },\n          Txy: {\n            x: vend.x - area.getBoundingClientRect().left,\n            y: vend.y - area.getBoundingClientRect().top\n          }\n        }\n      } else {\n        obj = {\n          Mxy: {\n            x: vstart.getBoundingClientRect().left - area.getBoundingClientRect().left + (5 * scaling.ZoomX),\n            y: vstart.getBoundingClientRect().top - area.getBoundingClientRect().top + (5 * scaling.ZoomY)\n          },\n          Txy: {\n            x: vend.getBoundingClientRect().left - area.getBoundingClientRect().left + (4 * scaling.ZoomX),\n            y: vend.getBoundingClientRect().top - area.getBoundingClientRect().top + 0\n          }\n        }\n      }\n      return obj\n    },\n    mouseFn (event, portData) {\n      this.$emit('on-mouse', event, portData)\n    },\n    mouseOverFn (event, portData) {\n      this.$emit('on-mouse-over', event, portData)\n    },\n    mouseOutFn (event, portData) {\n      this.$emit('on-mouse-out', event, portData)\n    }\n  }\n}\n</script>\n"]}]}