{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\others\\AutoComplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\others\\AutoComplete.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\n\nexport default {\n  name: 'bm-autocomplete',\n  mixins: [commonMixin()],\n  props: {\n    types: {\n      type: String\n    },\n    location: {\n      type: String\n    },\n    sugStyle: {\n      type: Object,\n      default () {\n        return {}\n      }\n    }\n  },\n  watch: {\n    types () {\n      this.reload()\n    },\n    location () {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, $el, types, location, sugStyle} = this\n      const input = $el.querySelector('input')\n      if (!input) {\n        return\n      }\n      this.originInstance = new BMap.Autocomplete({\n        input,\n        types,\n        location: location || map,\n        onSearchComplete: e => {\n          const $sugs = document.querySelectorAll('.tangram-suggestion-main')\n          for (const $sug of $sugs) {\n            for (const name in sugStyle) {\n              $sug.style[name] = sugStyle[name].toString()\n            }\n          }\n          this.$emit('searchcomplete', e)\n        }\n      })\n\n      // Support v-model\n      this.originInstance.addEventListener('onconfirm', e => {\n        const val = e.item.value\n        this.$emit('input', val.province + val.city + val.district + val.street + val.business)\n      })\n\n      bindEvents.call(this, this.originInstance)\n    }\n  }\n}\n",{"version":3,"sources":["AutoComplete.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"AutoComplete.vue","sourceRoot":"node_modules/vue-baidu-map/components/others","sourcesContent":["<template>\n<span>\n  <slot>\n    <input>\n  </slot>\n</span>\n</template>\n\n<script>\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\n\nexport default {\n  name: 'bm-autocomplete',\n  mixins: [commonMixin()],\n  props: {\n    types: {\n      type: String\n    },\n    location: {\n      type: String\n    },\n    sugStyle: {\n      type: Object,\n      default () {\n        return {}\n      }\n    }\n  },\n  watch: {\n    types () {\n      this.reload()\n    },\n    location () {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, $el, types, location, sugStyle} = this\n      const input = $el.querySelector('input')\n      if (!input) {\n        return\n      }\n      this.originInstance = new BMap.Autocomplete({\n        input,\n        types,\n        location: location || map,\n        onSearchComplete: e => {\n          const $sugs = document.querySelectorAll('.tangram-suggestion-main')\n          for (const $sug of $sugs) {\n            for (const name in sugStyle) {\n              $sug.style[name] = sugStyle[name].toString()\n            }\n          }\n          this.$emit('searchcomplete', e)\n        }\n      })\n\n      // Support v-model\n      this.originInstance.addEventListener('onconfirm', e => {\n        const val = e.item.value\n        this.$emit('input', val.province + val.city + val.district + val.street + val.business)\n      })\n\n      bindEvents.call(this, this.originInstance)\n    }\n  }\n}\n</script>\n"]}]}