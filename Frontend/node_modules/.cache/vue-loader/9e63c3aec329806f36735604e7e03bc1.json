{"remainingRequest":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\search\\Bus.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\search\\Bus.vue","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\nimport {createPoint} from '../base/factory.js'\nimport {isPoint} from '../base/util.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bm-bus',\n  mixins: [commonMixin('search')],\n  props: {\n    location: {\n      type: [Object, String]\n    },\n    keyword: {\n      type: String\n    },\n    panel: {\n      type: Boolean,\n      default: true\n    },\n    pageCapacity: {\n      type: Number\n    },\n    autoViewport: {\n      type: Boolean\n    },\n    selectFirstResult: {\n      type: Boolean\n    }\n  },\n  watch: {\n    location: {\n      handler (val) {\n        const {originInstance, map} = this\n        originInstance.setLocation(val || map)\n      },\n      deep: true\n    },\n    keyword (val) {\n      this.search(val)\n    },\n    panel () {\n      this.reload()\n    },\n    autoViewport (val) {\n      this.reload()\n    },\n    selectFirstResult (val) {\n      this.reload()\n    }\n  },\n  methods: {\n    search (keyword) {\n      const {originInstance} = this\n      originInstance.getBusList(keyword)\n    },\n    load () {\n      const instance = this\n      const {location, selectFirstResult, autoViewport, highlightMode, keyword, search, BMap, map, originInstance} = this\n      const _location = location ? isPoint(location) ? createPoint(BMap, location) : location : map\n      const route = this.originInstance = new BMap.BusLineSearch(_location, {\n        renderOptions: {\n          map,\n          panel: this.$el,\n          selectFirstResult,\n          autoViewport,\n          highlightMode\n        },\n        onGetBusListComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('getbuslistcomplete', e)\n        },\n        onGetBusLineComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('getbuslinecomplete', e)\n        },\n        onBusListHtmlSet (e) {\n          instance.$emit('buslisthtmlset', e)\n        },\n        onBusLineHtmlSet (e) {\n          instance.$emit('buslinehtmlset', e)\n        },\n        onMarkersSet (e) {\n          instance.$emit('markersset', e)\n        },\n        onPolylinesSet (e) {\n          instance.$emit('polylinesset', e)\n        }\n      })\n      search(keyword)\n    }\n  }\n}\n",{"version":3,"sources":["Bus.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Bus.vue","sourceRoot":"node_modules/vue-baidu-map/components/search","sourcesContent":["<template>\n<div v-show=\"panel\">\n</div>\n</template>\n\n<script>\nimport {createPoint} from '../base/factory.js'\nimport {isPoint} from '../base/util.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bm-bus',\n  mixins: [commonMixin('search')],\n  props: {\n    location: {\n      type: [Object, String]\n    },\n    keyword: {\n      type: String\n    },\n    panel: {\n      type: Boolean,\n      default: true\n    },\n    pageCapacity: {\n      type: Number\n    },\n    autoViewport: {\n      type: Boolean\n    },\n    selectFirstResult: {\n      type: Boolean\n    }\n  },\n  watch: {\n    location: {\n      handler (val) {\n        const {originInstance, map} = this\n        originInstance.setLocation(val || map)\n      },\n      deep: true\n    },\n    keyword (val) {\n      this.search(val)\n    },\n    panel () {\n      this.reload()\n    },\n    autoViewport (val) {\n      this.reload()\n    },\n    selectFirstResult (val) {\n      this.reload()\n    }\n  },\n  methods: {\n    search (keyword) {\n      const {originInstance} = this\n      originInstance.getBusList(keyword)\n    },\n    load () {\n      const instance = this\n      const {location, selectFirstResult, autoViewport, highlightMode, keyword, search, BMap, map, originInstance} = this\n      const _location = location ? isPoint(location) ? createPoint(BMap, location) : location : map\n      const route = this.originInstance = new BMap.BusLineSearch(_location, {\n        renderOptions: {\n          map,\n          panel: this.$el,\n          selectFirstResult,\n          autoViewport,\n          highlightMode\n        },\n        onGetBusListComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('getbuslistcomplete', e)\n        },\n        onGetBusLineComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('getbuslinecomplete', e)\n        },\n        onBusListHtmlSet (e) {\n          instance.$emit('buslisthtmlset', e)\n        },\n        onBusLineHtmlSet (e) {\n          instance.$emit('buslinehtmlset', e)\n        },\n        onMarkersSet (e) {\n          instance.$emit('markersset', e)\n        },\n        onPolylinesSet (e) {\n          instance.$emit('polylinesset', e)\n        }\n      })\n      search(keyword)\n    }\n  }\n}\n</script>\n"]}]}