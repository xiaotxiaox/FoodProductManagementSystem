{"remainingRequest":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ConstructionConsultationSystem\\Frontend\\src\\components\\baidu-map.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ConstructionConsultationSystem\\Frontend\\src\\components\\baidu-map.vue","mtime":1569586185067},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n\r\nexport default {\r\n  props: {\r\n    zoom: {\r\n      type: Number,\r\n      default: 15\r\n    },\r\n    center: {\r\n      type: [Object, String],\r\n      default () {\r\n        return {lng: 116.404, lat: 39.915}\r\n      }\r\n    },\r\n    marker: {\r\n      type: [Object, String],\r\n      default () {\r\n        return {lng: 116.404, lat: 39.915}\r\n      }\r\n    },\r\n    search: ''\r\n  },\r\n  data: () => ({\r\n    ak: 'okFNZHPQ0BfF9Qhq3K1WmrRv',\r\n    BMap: {},\r\n    map: {},\r\n    currentPosition: null\r\n  }),\r\n  methods: {\r\n    init (BMap) {\r\n      let $el = this.$refs.map\r\n      const map = new BMap.Map($el)\r\n      this.map = map\r\n\r\n      // 初始化中心位置\r\n      const {getCenterPoint, zoom} = this\r\n      map.centerAndZoom(getCenterPoint(), zoom || 15)\r\n\r\n      this.setMarker(this.marker)\r\n      this.$emit('ready', {BMap, map})\r\n    },\r\n\r\n    // 初始化地图\r\n    initMap (BMap) {\r\n      this.BMap = BMap\r\n      this.init(BMap)\r\n    },\r\n\r\n    // 加载百度地图API\r\n    getMapScript () {\r\n      if (!global.BMap) {\r\n        const ak = this.ak || this._BMap().ak\r\n        global.BMap = {}\r\n        global.BMap._preloader = new Promise((resolve, reject) => {\r\n          global._initBaiduMap = function () {\r\n            resolve(global.BMap)\r\n            global.document.body.removeChild($script)\r\n            global.BMap._preloader = null\r\n            global._initBaiduMap = null\r\n          }\r\n          const $script = document.createElement('script')\r\n          global.document.body.appendChild($script)\r\n          $script.src = `//api.map.baidu.com/api?v=2.0&ak=${ak}&callback=_initBaiduMap`\r\n        })\r\n        return global.BMap._preloader\r\n      } else if (!global.BMap._preloader) {\r\n        return Promise.resolve(global.BMap)\r\n      } else {\r\n        return global.BMap._preloader\r\n      }\r\n    },\r\n\r\n    // 地图中心点\r\n    getCenterPoint () {\r\n      const {center, BMap} = this\r\n      switch (typeof center) {\r\n        case 'string':\r\n          return center\r\n        case 'object':\r\n          return new BMap.Point(parseFloat(center.lng), parseFloat(center.lat))\r\n        default: return new BMap.Point(116.404, 39.915)\r\n      }\r\n    },\r\n\r\n    // 设置中心点\r\n    setCenter () {\r\n      const {map, getCenterPoint} = this\r\n      map.setCenter(getCenterPoint())\r\n    },\r\n\r\n    // 设置Marker\r\n    setMarker (p) {\r\n      const {map, BMap} = this\r\n      map.clearOverlays() // 清除地图上所有覆盖物\r\n      const marker = new BMap.Marker(new BMap.Point(parseFloat(p.lng), parseFloat(p.lat))) // 创建标注\r\n      map.addOverlay(marker) // 将标注添加到地图中\r\n      marker.enableDragging() // 可拖拽\r\n      marker.addEventListener('dragend', () => {\r\n        var p = marker.getPosition()\r\n        this.currentValue = {\r\n          lng: p.lng,\r\n          lat: p.lat\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n    // 获取当前坐标\r\n    getCurrentPosition (callback) {\r\n      const { BMap } = this\r\n      var _this = this\r\n      let geolocation = new BMap.Geolocation()\r\n      geolocation.getCurrentPosition(function (r) {\r\n        if (this.getStatus() === global.BMAP_STATUS_SUCCESS) {\r\n          _this.currentPosition = r.point\r\n          callback(r)\r\n        } else {\r\n          callback(false)\r\n        }\r\n      }, {enableHighAccuracy: true})\r\n    },\r\n\r\n    // 初始化附近\r\n    initNearby (callback) {\r\n      const { BMap, currentPosition, getCurrentPosition } = this\r\n      var geoc = new BMap.Geocoder()\r\n\r\n      if (!currentPosition) {\r\n        getCurrentPosition(response => {\r\n          let point = new BMap.Point(parseFloat(response.point.lng), parseFloat(response.point.lat))\r\n          geoc.getLocation(point, function (results) {\r\n            callback(results.surroundingPois)\r\n          }, {\r\n            poiRadius: 10 * 1000,\r\n            numPois: 10\r\n          })\r\n        })\r\n      } else {\r\n        let point = new BMap.Point(parseFloat(currentPosition.lng), parseFloat(currentPosition.lat))\r\n        geoc.getLocation(point, function (results) {\r\n          callback(results)\r\n        })\r\n      }\r\n    },\r\n\r\n    // 获取周边信息\r\n    searchNearby (key, callback) {\r\n      const { BMap, map, currentPosition, getCurrentPosition } = this\r\n      var options = {\r\n        onSearchComplete: results => {\r\n          if (local.getStatus() === global.BMAP_STATUS_SUCCESS) {\r\n            var rel = []\r\n            for (var i = 0; i < results.getCurrentNumPois(); i++) {\r\n              rel.push(results.getPoi(i))\r\n            }\r\n            callback(rel)\r\n          }\r\n        }\r\n      }\r\n      var local = new BMap.LocalSearch(map, options)\r\n\r\n      if (!currentPosition) {\r\n        getCurrentPosition(response => {\r\n          let point = new BMap.Point(parseFloat(response.point.lng), parseFloat(response.point.lat))\r\n          local.searchNearby(key, point, 20 * 1000)\r\n        })\r\n      } else {\r\n        let point = new BMap.Point(parseFloat(currentPosition.lng), parseFloat(currentPosition.lat))\r\n        local.searchNearby(key, point, 20 * 1000)\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    const {getMapScript, initMap} = this\r\n    getMapScript().then(initMap) // 加载地图接口，并初始化地图\r\n  }\r\n}\r\n\r\n",{"version":3,"sources":["baidu-map.vue"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"baidu-map.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div ref=\"map\" class=\"baidu-map\"></div>\r\n</template>\r\n<script>\r\nexport default {\r\n  props: {\r\n    zoom: {\r\n      type: Number,\r\n      default: 15\r\n    },\r\n    center: {\r\n      type: [Object, String],\r\n      default () {\r\n        return {lng: 116.404, lat: 39.915}\r\n      }\r\n    },\r\n    marker: {\r\n      type: [Object, String],\r\n      default () {\r\n        return {lng: 116.404, lat: 39.915}\r\n      }\r\n    },\r\n    search: ''\r\n  },\r\n  data: () => ({\r\n    ak: 'okFNZHPQ0BfF9Qhq3K1WmrRv',\r\n    BMap: {},\r\n    map: {},\r\n    currentPosition: null\r\n  }),\r\n  methods: {\r\n    init (BMap) {\r\n      let $el = this.$refs.map\r\n      const map = new BMap.Map($el)\r\n      this.map = map\r\n\r\n      // 初始化中心位置\r\n      const {getCenterPoint, zoom} = this\r\n      map.centerAndZoom(getCenterPoint(), zoom || 15)\r\n\r\n      this.setMarker(this.marker)\r\n      this.$emit('ready', {BMap, map})\r\n    },\r\n\r\n    // 初始化地图\r\n    initMap (BMap) {\r\n      this.BMap = BMap\r\n      this.init(BMap)\r\n    },\r\n\r\n    // 加载百度地图API\r\n    getMapScript () {\r\n      if (!global.BMap) {\r\n        const ak = this.ak || this._BMap().ak\r\n        global.BMap = {}\r\n        global.BMap._preloader = new Promise((resolve, reject) => {\r\n          global._initBaiduMap = function () {\r\n            resolve(global.BMap)\r\n            global.document.body.removeChild($script)\r\n            global.BMap._preloader = null\r\n            global._initBaiduMap = null\r\n          }\r\n          const $script = document.createElement('script')\r\n          global.document.body.appendChild($script)\r\n          $script.src = `//api.map.baidu.com/api?v=2.0&ak=${ak}&callback=_initBaiduMap`\r\n        })\r\n        return global.BMap._preloader\r\n      } else if (!global.BMap._preloader) {\r\n        return Promise.resolve(global.BMap)\r\n      } else {\r\n        return global.BMap._preloader\r\n      }\r\n    },\r\n\r\n    // 地图中心点\r\n    getCenterPoint () {\r\n      const {center, BMap} = this\r\n      switch (typeof center) {\r\n        case 'string':\r\n          return center\r\n        case 'object':\r\n          return new BMap.Point(parseFloat(center.lng), parseFloat(center.lat))\r\n        default: return new BMap.Point(116.404, 39.915)\r\n      }\r\n    },\r\n\r\n    // 设置中心点\r\n    setCenter () {\r\n      const {map, getCenterPoint} = this\r\n      map.setCenter(getCenterPoint())\r\n    },\r\n\r\n    // 设置Marker\r\n    setMarker (p) {\r\n      const {map, BMap} = this\r\n      map.clearOverlays() // 清除地图上所有覆盖物\r\n      const marker = new BMap.Marker(new BMap.Point(parseFloat(p.lng), parseFloat(p.lat))) // 创建标注\r\n      map.addOverlay(marker) // 将标注添加到地图中\r\n      marker.enableDragging() // 可拖拽\r\n      marker.addEventListener('dragend', () => {\r\n        var p = marker.getPosition()\r\n        this.currentValue = {\r\n          lng: p.lng,\r\n          lat: p.lat\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n    // 获取当前坐标\r\n    getCurrentPosition (callback) {\r\n      const { BMap } = this\r\n      var _this = this\r\n      let geolocation = new BMap.Geolocation()\r\n      geolocation.getCurrentPosition(function (r) {\r\n        if (this.getStatus() === global.BMAP_STATUS_SUCCESS) {\r\n          _this.currentPosition = r.point\r\n          callback(r)\r\n        } else {\r\n          callback(false)\r\n        }\r\n      }, {enableHighAccuracy: true})\r\n    },\r\n\r\n    // 初始化附近\r\n    initNearby (callback) {\r\n      const { BMap, currentPosition, getCurrentPosition } = this\r\n      var geoc = new BMap.Geocoder()\r\n\r\n      if (!currentPosition) {\r\n        getCurrentPosition(response => {\r\n          let point = new BMap.Point(parseFloat(response.point.lng), parseFloat(response.point.lat))\r\n          geoc.getLocation(point, function (results) {\r\n            callback(results.surroundingPois)\r\n          }, {\r\n            poiRadius: 10 * 1000,\r\n            numPois: 10\r\n          })\r\n        })\r\n      } else {\r\n        let point = new BMap.Point(parseFloat(currentPosition.lng), parseFloat(currentPosition.lat))\r\n        geoc.getLocation(point, function (results) {\r\n          callback(results)\r\n        })\r\n      }\r\n    },\r\n\r\n    // 获取周边信息\r\n    searchNearby (key, callback) {\r\n      const { BMap, map, currentPosition, getCurrentPosition } = this\r\n      var options = {\r\n        onSearchComplete: results => {\r\n          if (local.getStatus() === global.BMAP_STATUS_SUCCESS) {\r\n            var rel = []\r\n            for (var i = 0; i < results.getCurrentNumPois(); i++) {\r\n              rel.push(results.getPoi(i))\r\n            }\r\n            callback(rel)\r\n          }\r\n        }\r\n      }\r\n      var local = new BMap.LocalSearch(map, options)\r\n\r\n      if (!currentPosition) {\r\n        getCurrentPosition(response => {\r\n          let point = new BMap.Point(parseFloat(response.point.lng), parseFloat(response.point.lat))\r\n          local.searchNearby(key, point, 20 * 1000)\r\n        })\r\n      } else {\r\n        let point = new BMap.Point(parseFloat(currentPosition.lng), parseFloat(currentPosition.lat))\r\n        local.searchNearby(key, point, 20 * 1000)\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    const {getMapScript, initMap} = this\r\n    getMapScript().then(initMap) // 加载地图接口，并初始化地图\r\n  }\r\n}\r\n\r\n</script>\r\n<style>\r\n.baidu-map {\r\n  width: 100%;\r\n  height: 500px;\r\n  border: 1px solid #eee;\r\n}\r\n</style>\r\n\r\n\r\n"]}]}