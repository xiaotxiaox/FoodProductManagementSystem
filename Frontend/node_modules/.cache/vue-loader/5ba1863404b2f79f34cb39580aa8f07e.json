{"remainingRequest":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\extra\\Lushu.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\extra\\Lushu.vue","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n/*eslint-disable*/\nimport commonMixin from '../base/mixins/common.js'\nimport {createIcon} from '../base/factory.js'\nimport Lushu from 'bmaplib.lushu'\n\nexport default {\n  name: 'bm-lushu',\n  render (h) {},\n  mixins: [commonMixin('lushu')],\n  props: {\n    path: {\n      type: Array,\n      default: []\n    },\n    landmarkPois: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    icon: {\n      type: Object\n    },\n    speed: {\n      type: Number,\n      default: 4000\n    },\n    content: {\n      type: String,\n      default: ''\n    },\n    autoView: {\n      type: Boolean,\n      default: false\n    },\n    rotation: {\n      type: Boolean,\n      default: false\n    },\n    infoWindow: {\n      type: Boolean,\n      default: true\n    },\n    play: {\n      type: Boolean,\n      default: true\n    }\n  },\n  watch: {\n    path: {\n      handler (val) {\n        this.reload()\n      },\n      deep: true\n    },\n    landmarkPois: {\n      handler (val) {\n        this.reload()\n      },\n      deep: true\n    },\n    icon: {\n      handler (val) {\n        const {originInstance, content} = this\n        const newMarker = createIcon(BMap, val)\n        originInstance._opts.icon = newMarker\n        originInstance._marker = newMarker\n      },\n      deep: true\n    },\n    speed (val) {\n      const {originInstance, content} = this\n      originInstance._opts.speed = val\n    },\n    content (val) {\n      const {originInstance, infoWindow} = this\n      val && infoWindow ? originInstance.showInfoWindow() : originInstance.hideInfoWindow()\n      originInstance._opts.defaultContent = val\n      originInstance._overlay && originInstance._overlay.setHtml(val)\n    },\n    autoView (val) {\n      const {originInstance, content} = this\n      originInstance._opts.autoView = val\n    },\n    rotation (val) {\n      const {originInstance, content} = this\n      originInstance._opts.enableRotation = val\n    },\n    infoWindow (val) {\n      const {originInstance, content} = this\n      originInstance && val && content ? originInstance.showInfoWindow() : originInstance.hideInfoWindow()\n    },\n    play (val) {\n      const {originInstance} = this\n      val && originInstance ? originInstance.start() : !this._isEnd && originInstance.pause()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, path, landmarkPois, icon, speed, content, autoView, rotation, infoWindow, play} = this\n      const lushu = this.originInstance = new Lushu(map, path, {\n        enableRotation: rotation,\n        landmarkPois,\n        showInfoWindow: infoWindow,\n        defaultContent: content,\n        icon: icon && createIcon(BMap, icon),\n        speed,\n        autoView,\n        onstart: e => {\n          this._isEnd = false\n          this.$emit('start')\n        },\n        onstop: e => {\n          this._isEnd = true\n          this.$emit('stop')\n        },\n        onpause: e => this.$emit('pause')\n      })\n      play && path.length && lushu.start(this)\n      path.length && (content && infoWindow ? lushu.showInfoWindow() : lushu.hideInfoWindow())\n    }\n  }\n}\n",{"version":3,"sources":["Lushu.vue"],"names":[],"mappingsfile":"Lushu.vue","sourceRoot":"node_modules/vue-baidu-map/components/extra","sourcesContent":["<script>\n/*eslint-disable*/\nimport commonMixin from '../base/mixins/common.js'\nimport {createIcon} from '../base/factory.js'\nimport Lushu from 'bmaplib.lushu'\n\nexport default {\n  name: 'bm-lushu',\n  render (h) {},\n  mixins: [commonMixin('lushu')],\n  props: {\n    path: {\n      type: Array,\n      default: []\n    },\n    landmarkPois: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    icon: {\n      type: Object\n    },\n    speed: {\n      type: Number,\n      default: 4000\n    },\n    content: {\n      type: String,\n      default: ''\n    },\n    autoView: {\n      type: Boolean,\n      default: false\n    },\n    rotation: {\n      type: Boolean,\n      default: false\n    },\n    infoWindow: {\n      type: Boolean,\n      default: true\n    },\n    play: {\n      type: Boolean,\n      default: true\n    }\n  },\n  watch: {\n    path: {\n      handler (val) {\n        this.reload()\n      },\n      deep: true\n    },\n    landmarkPois: {\n      handler (val) {\n        this.reload()\n      },\n      deep: true\n    },\n    icon: {\n      handler (val) {\n        const {originInstance, content} = this\n        const newMarker = createIcon(BMap, val)\n        originInstance._opts.icon = newMarker\n        originInstance._marker = newMarker\n      },\n      deep: true\n    },\n    speed (val) {\n      const {originInstance, content} = this\n      originInstance._opts.speed = val\n    },\n    content (val) {\n      const {originInstance, infoWindow} = this\n      val && infoWindow ? originInstance.showInfoWindow() : originInstance.hideInfoWindow()\n      originInstance._opts.defaultContent = val\n      originInstance._overlay && originInstance._overlay.setHtml(val)\n    },\n    autoView (val) {\n      const {originInstance, content} = this\n      originInstance._opts.autoView = val\n    },\n    rotation (val) {\n      const {originInstance, content} = this\n      originInstance._opts.enableRotation = val\n    },\n    infoWindow (val) {\n      const {originInstance, content} = this\n      originInstance && val && content ? originInstance.showInfoWindow() : originInstance.hideInfoWindow()\n    },\n    play (val) {\n      const {originInstance} = this\n      val && originInstance ? originInstance.start() : !this._isEnd && originInstance.pause()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, path, landmarkPois, icon, speed, content, autoView, rotation, infoWindow, play} = this\n      const lushu = this.originInstance = new Lushu(map, path, {\n        enableRotation: rotation,\n        landmarkPois,\n        showInfoWindow: infoWindow,\n        defaultContent: content,\n        icon: icon && createIcon(BMap, icon),\n        speed,\n        autoView,\n        onstart: e => {\n          this._isEnd = false\n          this.$emit('start')\n        },\n        onstop: e => {\n          this._isEnd = true\n          this.$emit('stop')\n        },\n        onpause: e => this.$emit('pause')\n      })\n      play && path.length && lushu.start(this)\n      path.length && (content && infoWindow ? lushu.showInfoWindow() : lushu.hideInfoWindow())\n    }\n  }\n}\n</script>\n"]}]}