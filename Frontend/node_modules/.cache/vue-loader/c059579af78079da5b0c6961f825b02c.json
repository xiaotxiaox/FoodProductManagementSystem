{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\port\\inport.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\port\\inport.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\n\nconst prefixCls = 'task-port'\nexport default {\n  name: 'InPort',\n  data () {\n    return {\n      className: null\n    }\n  },\n  props: {\n    pid: [Number, String],\n    content: {\n      type: [String, Number],\n      default: '输入'\n    },\n    isConnected: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-in`\n      ]\n    },\n    magnetCls () {\n      return [\n        `${prefixCls}-magnet`\n      ]\n    },\n    isCls () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-in`,\n        `is-connected`\n      ]\n    }\n  },\n  methods: {\n    inDropPort: function (event) {\n      if (this.className) {\n        let _this = event.target.parentNode\n        _this.className = this.className\n      }\n      let startData = event.dataTransfer.getData('portStart')\n      if (startData) {\n        this.$emit('on-add-path', event, startData, this.pid)\n      }\n    },\n    dragPortOver: function (event) {\n    },\n    dragEnter: function (event) {\n      let _this = event.target.parentNode\n      this.className = _this.className\n      _this.className = 'task-port task-in-out'\n    },\n    dragLeave: function (event) {\n      let _this = event.target.parentNode\n      _this.className = this.className\n    }\n  }\n}\n",{"version":3,"sources":["inport.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"inport.vue","sourceRoot":"node_modules/vue-task-node/src/lib/components/port","sourcesContent":["<template>\n  <div :class=\"[isConnected ? isCls:classes]\" :id=\"pid\" @dragover.prevent=dragPortOver($event) @drop.prevent='inDropPort($event)' @dragenter=\"dragEnter\" @dragleave=\"dragLeave\">\n      <span :class=\"magnetCls\"></span>\n  </div>\n</template>\n<script>\n\nconst prefixCls = 'task-port'\nexport default {\n  name: 'InPort',\n  data () {\n    return {\n      className: null\n    }\n  },\n  props: {\n    pid: [Number, String],\n    content: {\n      type: [String, Number],\n      default: '输入'\n    },\n    isConnected: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-in`\n      ]\n    },\n    magnetCls () {\n      return [\n        `${prefixCls}-magnet`\n      ]\n    },\n    isCls () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-in`,\n        `is-connected`\n      ]\n    }\n  },\n  methods: {\n    inDropPort: function (event) {\n      if (this.className) {\n        let _this = event.target.parentNode\n        _this.className = this.className\n      }\n      let startData = event.dataTransfer.getData('portStart')\n      if (startData) {\n        this.$emit('on-add-path', event, startData, this.pid)\n      }\n    },\n    dragPortOver: function (event) {\n    },\n    dragEnter: function (event) {\n      let _this = event.target.parentNode\n      this.className = _this.className\n      _this.className = 'task-port task-in-out'\n    },\n    dragLeave: function (event) {\n      let _this = event.target.parentNode\n      _this.className = this.className\n    }\n  }\n}\n</script>\n"]}]}