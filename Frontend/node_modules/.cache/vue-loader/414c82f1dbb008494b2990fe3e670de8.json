{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\workarea\\workarea.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\workarea\\workarea.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mixinsTool from '../../mixins/tool'\nconst prefixCls = 'task-work-area'\nexport default {\n  name: 'WorkArea',\n  mixins: [ mixinsTool ],\n  data () {\n    return {\n      svgWidth: 1000,\n      svgHeight: 500\n    }\n  },\n  props: {\n    ini: {\n      lineType: {\n        type: [String],\n        default: 'Q'\n      },\n      isDotted: {\n        type: [Boolean],\n        default: false\n      },\n      scaling: {\n        type: [Object],\n        default: {ZoomX: 1, ZoomY: 1}\n      }\n    },\n    width: {\n      type: [String, Number],\n      default: 0\n    },\n    height: {\n      type: [String, Number],\n      default: 0\n    },\n    id: {\n      type: [String, Number]\n    }\n  },\n  watch: {\n    ini: {\n      handler (newIni, oldIni) {\n        this.$store.dispatch('setViConfig', newIni)\n      },\n      deep: true\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`\n      ]\n    },\n    areaStyles () {\n      let style = {}\n      if (this.isCssInUnit(this.width) >= 0) {\n        style.width = this.width\n      } else {\n        style.width = `${this.width}px`\n      }\n      if (this.isCssInUnit(this.height) >= 0) {\n        style.height = this.height\n      } else {\n        style.height = `${this.height}px`\n      }\n      return style\n    }\n  },\n  mounted: function () {\n    let me = this\n    this.setSvgHW(me)\n    window.onresize = function () {\n      me.setSvgHW(me)\n    }\n  },\n  methods: {\n    setSvgHW: function (me) {\n      let width = this.transferCss(this.width)\n      let height = this.transferCss(this.height)\n      if (me.getBrowserHW().width < width) {\n        me.svgWidth = width\n      } else {\n        me.svgWidth = me.getBrowserHW().width\n      }\n      if (me.getBrowserHW().height < height) {\n        me.svgHeight = height\n      } else {\n        me.svgHeight = me.getBrowserHW().height\n      }\n    },\n    mouseMenu: function (event) {\n      this.$emit('on-mouse', event, this.id)\n    },\n    onAddNodeModel: function (event) {\n      let node = event.dataTransfer.getData('nodemodel')\n      let scalin = this.$store.getters.getViConfig.scaling\n      if (node) {\n        let nodeObj = JSON.parse(node)\n        let ref = this.$refs.svgArea\n        nodeObj.positionX = ((event.clientX - this.getContainersLeft(ref)) / scalin.ZoomX).toFixed(1)\n        nodeObj.positionY = ((event.clientY - this.getContainersTop(ref)) / scalin.ZoomY).toFixed(1)\n        this.$emit('on-add-nodemodel', event, nodeObj)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["workarea.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAafile":"workarea.vue","sourceRoot":"node_modules/vue-task-node/src/lib/components/workarea","sourcesContent":["<template>\n  <div :class=\"classes\" ref=\"svgArea\" :style=\"areaStyles\" @contextmenu.prevent=\"mouseMenu\" @dragover.prevent @drop.prevent=\"onAddNodeModel\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" :width=\"svgWidth\" :height=\"svgHeight\" :id=\"id\">\n          <g :transform=\"'translate(0,0) scale('+ini.scaling.ZoomX+','+ini.scaling.ZoomY+')'\">\n            <g>\n              <slot></slot>\n            </g>\n          </g>\n        </svg>\n  </div>\n</template>\n\n<script>\nimport mixinsTool from '../../mixins/tool'\nconst prefixCls = 'task-work-area'\nexport default {\n  name: 'WorkArea',\n  mixins: [ mixinsTool ],\n  data () {\n    return {\n      svgWidth: 1000,\n      svgHeight: 500\n    }\n  },\n  props: {\n    ini: {\n      lineType: {\n        type: [String],\n        default: 'Q'\n      },\n      isDotted: {\n        type: [Boolean],\n        default: false\n      },\n      scaling: {\n        type: [Object],\n        default: {ZoomX: 1, ZoomY: 1}\n      }\n    },\n    width: {\n      type: [String, Number],\n      default: 0\n    },\n    height: {\n      type: [String, Number],\n      default: 0\n    },\n    id: {\n      type: [String, Number]\n    }\n  },\n  watch: {\n    ini: {\n      handler (newIni, oldIni) {\n        this.$store.dispatch('setViConfig', newIni)\n      },\n      deep: true\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`\n      ]\n    },\n    areaStyles () {\n      let style = {}\n      if (this.isCssInUnit(this.width) >= 0) {\n        style.width = this.width\n      } else {\n        style.width = `${this.width}px`\n      }\n      if (this.isCssInUnit(this.height) >= 0) {\n        style.height = this.height\n      } else {\n        style.height = `${this.height}px`\n      }\n      return style\n    }\n  },\n  mounted: function () {\n    let me = this\n    this.setSvgHW(me)\n    window.onresize = function () {\n      me.setSvgHW(me)\n    }\n  },\n  methods: {\n    setSvgHW: function (me) {\n      let width = this.transferCss(this.width)\n      let height = this.transferCss(this.height)\n      if (me.getBrowserHW().width < width) {\n        me.svgWidth = width\n      } else {\n        me.svgWidth = me.getBrowserHW().width\n      }\n      if (me.getBrowserHW().height < height) {\n        me.svgHeight = height\n      } else {\n        me.svgHeight = me.getBrowserHW().height\n      }\n    },\n    mouseMenu: function (event) {\n      this.$emit('on-mouse', event, this.id)\n    },\n    onAddNodeModel: function (event) {\n      let node = event.dataTransfer.getData('nodemodel')\n      let scalin = this.$store.getters.getViConfig.scaling\n      if (node) {\n        let nodeObj = JSON.parse(node)\n        let ref = this.$refs.svgArea\n        nodeObj.positionX = ((event.clientX - this.getContainersLeft(ref)) / scalin.ZoomX).toFixed(1)\n        nodeObj.positionY = ((event.clientY - this.getContainersTop(ref)) / scalin.ZoomY).toFixed(1)\n        this.$emit('on-add-nodemodel', event, nodeObj)\n      }\n    }\n  }\n}\n</script>\n"]}]}