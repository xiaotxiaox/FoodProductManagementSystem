{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\path\\tline.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\path\\tline.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport Line from '../../utils/line'\nconst prefixCls = 'task-tline'\nexport default {\n  name: 'TLine',\n  data () {\n    return {\n      lpath: 'M0 0 Q 0 0, 0 0 T 0 0',\n      isDraw: false\n    }\n  },\n  props: {\n    portData: {\n      ptype: {\n        type: [String, Number],\n        default: 'Q'\n      },\n      dotted: {\n        type: [String, Boolean],\n        default: false\n      },\n      Mxy: {\n        x: [String, Number],\n        y: [String, Number]\n      },\n      Txy: {\n        x: [String, Number],\n        y: [String, Number]\n      },\n      startPort: {\n        type: [String, Number]\n      },\n      endPort: {\n        type: [String, Number]\n      }\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`\n      ]\n    },\n    conCls () {\n      return [\n        `${prefixCls}-con`\n      ]\n    },\n    conWrapCls () {\n      let me = this\n      return [\n        `${prefixCls}-con-wrap`,\n        me.portData.dotted ? `${prefixCls}-dotted` : ``\n      ]\n    },\n    conWrapHoverCls () {\n      return [\n        `${prefixCls}-hover`\n      ]\n    }\n  },\n  beforeUpdate: function () {\n    if (!this.isDraw) {\n      this.drawCurvePath()\n    }\n    this.isDraw = false\n  },\n  mounted: function () {\n    this.drawCurvePath()\n    this.isDraw = true\n    let me = this\n    // let nameSpace = 'http://www.w3.org/2000/svg'\n    let _this = this.$refs.con\n    _this.addEventListener('mouseover', function () {\n      let wr = me.$refs.wrap\n      wr.classList.add(me.conWrapHoverCls)\n      me.$emit('on-mouse-over', wr, me.portData)\n    })\n    _this.addEventListener('mouseout', function () {\n      let wr = me.$refs.wrap\n      wr.classList.remove(me.conWrapHoverCls)\n      me.$emit('on-mouse-out', wr, me.portData)\n    })\n  },\n  methods: {\n    drawCurvePath () {\n      if (this.portData.Mxy && this.portData.Txy) {\n        this.lpath = Line.drawCurvePath(this.portData.Mxy, this.portData.Txy, this.portData.ptype, this.$store.getters.getViConfig.scaling)\n      }\n      return this.lpath\n    },\n    mouseFn (event) {\n      event.stopPropagation()\n      this.$emit('on-mouse', event, this.portData)\n    }\n  }\n}\n",{"version":3,"sources":["tline.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tline.vue","sourceRoot":"node_modules/vue-task-node/src/lib/components/path","sourcesContent":["<template>\n  <g :class=\"classes\">\n    <path :class=\"conWrapCls\" ref=\"wrap\" :d=\"lpath\">\n    </path>\n    <path :class=\"conCls\" ref=\"con\" :d=\"lpath\" @contextmenu.prevent=\"mouseFn\">\n    </path>\n  </g>\n</template>\n<script>\nimport Line from '../../utils/line'\nconst prefixCls = 'task-tline'\nexport default {\n  name: 'TLine',\n  data () {\n    return {\n      lpath: 'M0 0 Q 0 0, 0 0 T 0 0',\n      isDraw: false\n    }\n  },\n  props: {\n    portData: {\n      ptype: {\n        type: [String, Number],\n        default: 'Q'\n      },\n      dotted: {\n        type: [String, Boolean],\n        default: false\n      },\n      Mxy: {\n        x: [String, Number],\n        y: [String, Number]\n      },\n      Txy: {\n        x: [String, Number],\n        y: [String, Number]\n      },\n      startPort: {\n        type: [String, Number]\n      },\n      endPort: {\n        type: [String, Number]\n      }\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`\n      ]\n    },\n    conCls () {\n      return [\n        `${prefixCls}-con`\n      ]\n    },\n    conWrapCls () {\n      let me = this\n      return [\n        `${prefixCls}-con-wrap`,\n        me.portData.dotted ? `${prefixCls}-dotted` : ``\n      ]\n    },\n    conWrapHoverCls () {\n      return [\n        `${prefixCls}-hover`\n      ]\n    }\n  },\n  beforeUpdate: function () {\n    if (!this.isDraw) {\n      this.drawCurvePath()\n    }\n    this.isDraw = false\n  },\n  mounted: function () {\n    this.drawCurvePath()\n    this.isDraw = true\n    let me = this\n    // let nameSpace = 'http://www.w3.org/2000/svg'\n    let _this = this.$refs.con\n    _this.addEventListener('mouseover', function () {\n      let wr = me.$refs.wrap\n      wr.classList.add(me.conWrapHoverCls)\n      me.$emit('on-mouse-over', wr, me.portData)\n    })\n    _this.addEventListener('mouseout', function () {\n      let wr = me.$refs.wrap\n      wr.classList.remove(me.conWrapHoverCls)\n      me.$emit('on-mouse-out', wr, me.portData)\n    })\n  },\n  methods: {\n    drawCurvePath () {\n      if (this.portData.Mxy && this.portData.Txy) {\n        this.lpath = Line.drawCurvePath(this.portData.Mxy, this.portData.Txy, this.portData.ptype, this.$store.getters.getViConfig.scaling)\n      }\n      return this.lpath\n    },\n    mouseFn (event) {\n      event.stopPropagation()\n      this.$emit('on-mouse', event, this.portData)\n    }\n  }\n}\n</script>\n"]}]}