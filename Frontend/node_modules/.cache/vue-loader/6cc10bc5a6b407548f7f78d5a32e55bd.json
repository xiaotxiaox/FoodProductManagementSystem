{"remainingRequest":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ConstructionConsultationSystem\\Frontend\\src\\views\\implement\\invest\\invest_tree\\components\\TreeActualBeforeModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ConstructionConsultationSystem\\Frontend\\src\\views\\implement\\invest\\invest_tree\\components\\TreeActualBeforeModal.vue","mtime":1571407854534},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n import api from '../../../../../api/implement'\n import { mapGetters } from 'vuex'\nexport default {\n  name: 'TreeActualBeforeModal',\n   props: {\n     id: Number,\n     visible: Boolean,\n     estimate: String,\n     actual: String\n  },\n  data(){\n    return {\n      layout: {\n        'label-col': { span: 8 },\n        'wrapper-col': { span: 12 }\n      },\n      treeList: [],\n      applicationList: [],\n      process:{},\n      form: this.$form.createForm(this),\n    }\n  },\n  mounted() {\n    this.getData()\n  },\n  methods:{\n    getData() {\n      api.getApplicationList(this.$store.getters.projectSelected.id)\n      .then(data => {\n        this.applicationList = data\n      })\n      api.getTreeList(this.$store.getters.projectSelected.id)\n      .then(data => {\n        this.treeList = data\n      })\n    api.getTreeSum(this.$store.getters.projectSelected.id)\n      .then(data => {\n        console.log(data)\n        this.card = data\n      })\n\n\n    },\n    handleOk () {\n      this.form.validateFields((error, data) => {\n        console.log(data)\n        if (!error) {\n          this.$emit('close')\n        }\n      })\n    },\n\n     handleCancel () {\n      this.$emit('close')\n    },\n\n  },\n  computed:{\n    total () {\n    let ret = {\n      estimate: '0',\n      actual: '0'\n    }\n    if (this.applicationList.length >0) {\n      ret = {\n        estimate: this.applicationList.map((item) => {\n          return parseFloat(item.estimate)\n        }).reduce((x, y) => {\n          return x + y\n        }).toFixed(2),\n        actual: this.applicationList.map((item) => {\n          let actual = item.actual\n          if (actual) {\n            return parseFloat(actual)\n          } else {\n            return 0\n          }\n        }).reduce((x, y) => {\n          return x + y\n        }).toFixed(2)\n      }\n    }\n    return ret\n  }\n  }\n\n}\n",{"version":3,"sources":["TreeActualBeforeModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"TreeActualBeforeModal.vue","sourceRoot":"src/views/implement/invest/invest_tree/components","sourcesContent":["\r\n<template>\r\n    <a-modal\r\n    :visible=\"visible\"\r\n    :keyboard=\"false\"\r\n    :maskClosable=\"false\"\r\n    okText=\"确定\"\r\n    okType=\"primary\"\r\n    @ok=\"handleOk()\"\r\n    @cancel=\"handleCancel()\">\r\n    <a-form\r\n      :form=\"form\">\r\n      <a-col\r\n          class=\"item\"\r\n          v-bind=\"layout\">\r\n          <span class=\"label\">计划花费：{{total.estimate}}元</span>\r\n          <p class=\"label\">实际花费：{{total.actual}}元</p>\r\n        </a-col>\r\n    </a-form>\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\n   import api from '../../../../../api/implement'\r\n   import { mapGetters } from 'vuex'\r\n  export default {\r\n    name: 'TreeActualBeforeModal',\r\n     props: {\r\n       id: Number,\r\n       visible: Boolean,\r\n       estimate: String,\r\n       actual: String\r\n    },\r\n    data(){\r\n      return {\r\n        layout: {\r\n          'label-col': { span: 8 },\r\n          'wrapper-col': { span: 12 }\r\n        },\r\n        treeList: [],\r\n        applicationList: [],\r\n        process:{},\r\n        form: this.$form.createForm(this),\r\n      }\r\n    },\r\n    mounted() {\r\n      this.getData()\r\n    },\r\n    methods:{\r\n      getData() {\r\n        api.getApplicationList(this.$store.getters.projectSelected.id)\r\n        .then(data => {\r\n          this.applicationList = data\r\n        })\r\n        api.getTreeList(this.$store.getters.projectSelected.id)\r\n        .then(data => {\r\n          this.treeList = data\r\n        })\r\n      api.getTreeSum(this.$store.getters.projectSelected.id)\r\n        .then(data => {\r\n          console.log(data)\r\n          this.card = data\r\n        })\r\n\r\n\r\n      },\r\n      handleOk () {\r\n        this.form.validateFields((error, data) => {\r\n          console.log(data)\r\n          if (!error) {\r\n            this.$emit('close')\r\n          }\r\n        })\r\n      },\r\n\r\n       handleCancel () {\r\n        this.$emit('close')\r\n      },\r\n\r\n    },\r\n    computed:{\r\n      total () {\r\n      let ret = {\r\n        estimate: '0',\r\n        actual: '0'\r\n      }\r\n      if (this.applicationList.length >0) {\r\n        ret = {\r\n          estimate: this.applicationList.map((item) => {\r\n            return parseFloat(item.estimate)\r\n          }).reduce((x, y) => {\r\n            return x + y\r\n          }).toFixed(2),\r\n          actual: this.applicationList.map((item) => {\r\n            let actual = item.actual\r\n            if (actual) {\r\n              return parseFloat(actual)\r\n            } else {\r\n              return 0\r\n            }\r\n          }).reduce((x, y) => {\r\n            return x + y\r\n          }).toFixed(2)\r\n        }\r\n      }\r\n      return ret\r\n    }\r\n    }\r\n\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}