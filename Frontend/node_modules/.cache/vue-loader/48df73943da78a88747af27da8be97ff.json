{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\port\\outport.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\port\\outport.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\nconst prefixCls = 'task-port'\nexport default {\n  name: 'OutPort',\n  data () {\n    return {\n      Mxy: null\n    }\n  },\n  props: {\n    pid: [Number, String],\n    content: {\n      type: [String, Number],\n      default: '输出'\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-out`\n      ]\n    },\n    magnetCls () {\n      return [\n        `${prefixCls}-magnet`\n      ]\n    }\n  },\n  methods: {\n    dragPortStrat: function (event) {\n      this.Mxy = {\n        x: event.clientX,\n        y: event.clientY\n      }\n      if (event.dataTransfer.addElement) {\n        let div = document.createElement('div')\n        div.setAttribute('style', `with:10px;height:10px;background-color:#eee`)\n        event.dataTransfer.addElement(div)\n      } else {\n        var img = new Image()\n        img.src = './static/img/outicon.png'\n        event.dataTransfer.setDragImage(img, 8, 3)\n      }\n      event.dataTransfer.setData('portStart', this.pid)\n    },\n    dragPortGing: function (event) {\n      let Txy = {\n        x: event.clientX,\n        y: event.clientY\n      }\n      this.$store.dispatch('setViPathingData', {Mxy: this.Mxy, Txy: Txy, isShow: true})\n    },\n    dragPortEnd: function (event) {\n      this.$store.dispatch('setViPathingData', {isShow: false})\n    }\n  }\n}\n",{"version":3,"sources":["outport.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"outport.vue","sourceRoot":"node_modules/vue-task-node/src/lib/components/port","sourcesContent":["<template>\n  <div :class=\"classes\" :id=\"pid\" @drag.stop='dragPortGing($event)' @dragstart.stop='dragPortStrat($event)' @dragend.stop=\"dragPortEnd($event)\" draggable=\"true\">\n    <span :class=\"magnetCls\"></span>\n  </div>\n</template>\n<script>\nconst prefixCls = 'task-port'\nexport default {\n  name: 'OutPort',\n  data () {\n    return {\n      Mxy: null\n    }\n  },\n  props: {\n    pid: [Number, String],\n    content: {\n      type: [String, Number],\n      default: '输出'\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-out`\n      ]\n    },\n    magnetCls () {\n      return [\n        `${prefixCls}-magnet`\n      ]\n    }\n  },\n  methods: {\n    dragPortStrat: function (event) {\n      this.Mxy = {\n        x: event.clientX,\n        y: event.clientY\n      }\n      if (event.dataTransfer.addElement) {\n        let div = document.createElement('div')\n        div.setAttribute('style', `with:10px;height:10px;background-color:#eee`)\n        event.dataTransfer.addElement(div)\n      } else {\n        var img = new Image()\n        img.src = './static/img/outicon.png'\n        event.dataTransfer.setDragImage(img, 8, 3)\n      }\n      event.dataTransfer.setData('portStart', this.pid)\n    },\n    dragPortGing: function (event) {\n      let Txy = {\n        x: event.clientX,\n        y: event.clientY\n      }\n      this.$store.dispatch('setViPathingData', {Mxy: this.Mxy, Txy: Txy, isShow: true})\n    },\n    dragPortEnd: function (event) {\n      this.$store.dispatch('setViPathingData', {isShow: false})\n    }\n  }\n}\n</script>\n"]}]}