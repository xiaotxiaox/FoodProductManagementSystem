{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\extra\\CurveLine.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\extra\\CurveLine.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport CurveLine from 'bmaplib.curveline'\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createPoint} from '../base/factory.js'\n\nconst eventList = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'mouseout',\n  'mouseover',\n  'remove',\n  'lineupdate'\n]\n\nexport default {\n  name: 'bml-curve-line',\n  render () {},\n  mixins: [commonMixin('overlay')],\n  props: {\n    points: {\n      type: Array,\n      default: Array\n    },\n    strokeColor: {\n      type: String\n    },\n    strokeWeight: {\n      type: Number\n    },\n    strokeOpacity: {\n      type: Number\n    },\n    strokeStyle: {\n      type: String\n    },\n    massClear: {\n      type: Boolean,\n      default: true\n    },\n    clicking: {\n      type: Boolean,\n      default: true\n    },\n    editing: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    points: {\n      handler (val, oldVal) {\n        this.originInstance.disableEditing()\n        this.reload()\n      },\n      deep: true\n    },\n    strokeColor (val) {\n      this.originInstance.setStrokeColor(val)\n    },\n    strokeOpacity (val) {\n      this.originInstance.setStrokeOpacity(val)\n    },\n    strokeWeight (val) {\n      this.originInstance.setStrokeWeight(val)\n    },\n    strokeStyle (val) {\n      this.originInstance.setStrokeStyle(val)\n    },\n    editing (val) {\n      val ? this.originInstance.enableEditing() : this.originInstance.disableEditing()\n    },\n    massClear (val) {\n      val ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear()\n    },\n    clicking (val) {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, points, strokeColor, strokeWeight, strokeOpacity, strokeStyle, editing, massClear, clicking} = this\n      const overlay = new CurveLine(points.map(item => createPoint(BMap, item)), {\n        strokeColor,\n        strokeWeight,\n        strokeOpacity,\n        strokeStyle,\n        // enableEditing: editing,\n        enableMassClear: massClear,\n        enableClicking: clicking\n      })\n      editing ? overlay.enableEditing() : overlay.disableEditing()\n      this.originInstance = overlay\n      map.addOverlay(overlay)\n      bindEvents.call(this, overlay, eventList)\n    }\n  }\n}\n",{"version":3,"sources":["CurveLine.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CurveLine.vue","sourceRoot":"node_modules/vue-baidu-map/components/extra","sourcesContent":["<script>\nimport CurveLine from 'bmaplib.curveline'\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createPoint} from '../base/factory.js'\n\nconst eventList = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'mouseout',\n  'mouseover',\n  'remove',\n  'lineupdate'\n]\n\nexport default {\n  name: 'bml-curve-line',\n  render () {},\n  mixins: [commonMixin('overlay')],\n  props: {\n    points: {\n      type: Array,\n      default: Array\n    },\n    strokeColor: {\n      type: String\n    },\n    strokeWeight: {\n      type: Number\n    },\n    strokeOpacity: {\n      type: Number\n    },\n    strokeStyle: {\n      type: String\n    },\n    massClear: {\n      type: Boolean,\n      default: true\n    },\n    clicking: {\n      type: Boolean,\n      default: true\n    },\n    editing: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    points: {\n      handler (val, oldVal) {\n        this.originInstance.disableEditing()\n        this.reload()\n      },\n      deep: true\n    },\n    strokeColor (val) {\n      this.originInstance.setStrokeColor(val)\n    },\n    strokeOpacity (val) {\n      this.originInstance.setStrokeOpacity(val)\n    },\n    strokeWeight (val) {\n      this.originInstance.setStrokeWeight(val)\n    },\n    strokeStyle (val) {\n      this.originInstance.setStrokeStyle(val)\n    },\n    editing (val) {\n      val ? this.originInstance.enableEditing() : this.originInstance.disableEditing()\n    },\n    massClear (val) {\n      val ? this.originInstance.enableMassClear() : this.originInstance.disableMassClear()\n    },\n    clicking (val) {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, points, strokeColor, strokeWeight, strokeOpacity, strokeStyle, editing, massClear, clicking} = this\n      const overlay = new CurveLine(points.map(item => createPoint(BMap, item)), {\n        strokeColor,\n        strokeWeight,\n        strokeOpacity,\n        strokeStyle,\n        // enableEditing: editing,\n        enableMassClear: massClear,\n        enableClicking: clicking\n      })\n      editing ? overlay.enableEditing() : overlay.disableEditing()\n      this.originInstance = overlay\n      map.addOverlay(overlay)\n      bindEvents.call(this, overlay, eventList)\n    }\n  }\n}\n</script>\n"]}]}