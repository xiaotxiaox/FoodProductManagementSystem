{"remainingRequest":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\search\\Driving.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\search\\Driving.vue","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\FoodProductManagementSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport {createPoint} from '../base/factory.js'\nimport {isPoint, getPosition} from '../base/util.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bm-driving',\n  mixins: [commonMixin('search')],\n  props: {\n    location: {\n      type: [Object, String]\n    },\n    start: {\n      type: [Object, String]\n    },\n    end: {\n      type: [Object, String]\n    },\n    startCity: {\n      type: [String, Number]\n    },\n    endCity: {\n      type: [String, Number]\n    },\n    waypoints: {\n      type: Array\n    },\n    policy: {\n      type: String\n    },\n    panel: {\n      type: Boolean,\n      default: true\n    },\n    autoViewport: {\n      type: Boolean\n    },\n    selectFirstResult: {\n      type: Boolean\n    }\n  },\n  watch: {\n    location: {\n      handler (val) {\n        const {originInstance, map} = this\n        originInstance.setLocation(val || map)\n      },\n      deep: true\n    },\n    start: {\n      handler (val) {\n        const {originInstance, end, startCity, endCity, waypoints, BMap, getWaypoints} = this\n        originInstance.search(getPosition(BMap, val), getPosition(BMap, end), {\n          startCity,\n          endCity,\n          waypoints: getWaypoints(waypoints)\n        })\n      },\n      deep: true\n    },\n    end: {\n      handler (val) {\n        const {originInstance, start, startCity, endCity, waypoints, BMap, getWaypoints} = this\n        originInstance.search(getPosition(BMap, start), getPosition(BMap, val), {\n          startCity,\n          endCity,\n          waypoints: getWaypoints(waypoints)\n        })\n      },\n      deep: true\n    },\n    startCity (val) {\n      const {originInstance, start, end, endCity, waypoints, getWaypoints} = this\n      originInstance.search(start, end, {\n        val,\n        endCity,\n        waypoints: getWaypoints(waypoints)\n      })\n    },\n    endCity (val) {\n      const {originInstance, start, end, startCity, waypoints, getWaypoints} = this\n      originInstance.search(start, end, {\n        startCity,\n        val,\n        waypoints: getWaypoints(waypoints)\n      })\n    },\n    waypoints: {\n      handler (val) {\n        const {originInstance, start, end, startCity, endCity, getWaypoints} = this\n        originInstance.search(start, end, {\n          startCity,\n          endCity,\n          waypoints: getWaypoints(val)\n        })\n      },\n      deep: true\n    },\n    panel () {\n      this.reload()\n    },\n    policy (val) {\n      this.reload()\n    },\n    autoViewport () {\n      this.reload()\n    },\n    selectFirstResult () {\n      this.reload()\n    },\n    highlightMode () {\n      this.reload()\n    }\n  },\n  methods: {\n    search (start, end, {startCity, endCity, waypoints}) {\n      const {originInstance, getWaypoints} = this\n      originInstance.search(start, end, {\n        startCity,\n        endCity,\n        waypoints: getWaypoints(waypoints)\n      })\n    },\n    getWaypoints (waypoints) {\n      const {BMap} = this\n      if (waypoints) {\n        return waypoints.map(position => getPosition(BMap, position))\n      }\n    },\n    load () {\n      const instance = this\n      const {map, BMap, location, policy, selectFirstResult, autoViewport, highlightMode, search, start, end, startCity, endCity, waypoints, originInstance, getWaypoints} = this\n      const _location = location ? isPoint(location) ? createPoint(BMap, location) : location : map\n      const route = this.originInstance = new BMap.DrivingRoute(_location, {\n        renderOptions: {\n          map,\n          // panel: panel && this.$el,\n          panel: this.$el,\n          selectFirstResult,\n          autoViewport,\n          highlightMode\n        },\n        policy: global[policy],\n        onSearchComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('searchcomplete', e)\n        },\n        onMarkersSet (e) {\n          instance.$emit('markersset', e)\n        },\n        onInfoHtmlSet (e) {\n          instance.$emit('infohtmlset', e)\n        },\n        onPolylinesSet (e) {\n          instance.$emit('polylinesset', e)\n        },\n        onResultsHtmlSet (e) {\n          instance.$emit('resultshtmlset', e)\n        }\n      })\n      search(getPosition(BMap, start), getPosition(BMap, end), {\n        startCity,\n        endCity,\n        waypoints: getWaypoints(waypoints)\n      })\n    }\n  }\n}\n",{"version":3,"sources":["Driving.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Driving.vue","sourceRoot":"node_modules/vue-baidu-map/components/search","sourcesContent":["<template>\n<div v-show=\"panel\">\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport {createPoint} from '../base/factory.js'\nimport {isPoint, getPosition} from '../base/util.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bm-driving',\n  mixins: [commonMixin('search')],\n  props: {\n    location: {\n      type: [Object, String]\n    },\n    start: {\n      type: [Object, String]\n    },\n    end: {\n      type: [Object, String]\n    },\n    startCity: {\n      type: [String, Number]\n    },\n    endCity: {\n      type: [String, Number]\n    },\n    waypoints: {\n      type: Array\n    },\n    policy: {\n      type: String\n    },\n    panel: {\n      type: Boolean,\n      default: true\n    },\n    autoViewport: {\n      type: Boolean\n    },\n    selectFirstResult: {\n      type: Boolean\n    }\n  },\n  watch: {\n    location: {\n      handler (val) {\n        const {originInstance, map} = this\n        originInstance.setLocation(val || map)\n      },\n      deep: true\n    },\n    start: {\n      handler (val) {\n        const {originInstance, end, startCity, endCity, waypoints, BMap, getWaypoints} = this\n        originInstance.search(getPosition(BMap, val), getPosition(BMap, end), {\n          startCity,\n          endCity,\n          waypoints: getWaypoints(waypoints)\n        })\n      },\n      deep: true\n    },\n    end: {\n      handler (val) {\n        const {originInstance, start, startCity, endCity, waypoints, BMap, getWaypoints} = this\n        originInstance.search(getPosition(BMap, start), getPosition(BMap, val), {\n          startCity,\n          endCity,\n          waypoints: getWaypoints(waypoints)\n        })\n      },\n      deep: true\n    },\n    startCity (val) {\n      const {originInstance, start, end, endCity, waypoints, getWaypoints} = this\n      originInstance.search(start, end, {\n        val,\n        endCity,\n        waypoints: getWaypoints(waypoints)\n      })\n    },\n    endCity (val) {\n      const {originInstance, start, end, startCity, waypoints, getWaypoints} = this\n      originInstance.search(start, end, {\n        startCity,\n        val,\n        waypoints: getWaypoints(waypoints)\n      })\n    },\n    waypoints: {\n      handler (val) {\n        const {originInstance, start, end, startCity, endCity, getWaypoints} = this\n        originInstance.search(start, end, {\n          startCity,\n          endCity,\n          waypoints: getWaypoints(val)\n        })\n      },\n      deep: true\n    },\n    panel () {\n      this.reload()\n    },\n    policy (val) {\n      this.reload()\n    },\n    autoViewport () {\n      this.reload()\n    },\n    selectFirstResult () {\n      this.reload()\n    },\n    highlightMode () {\n      this.reload()\n    }\n  },\n  methods: {\n    search (start, end, {startCity, endCity, waypoints}) {\n      const {originInstance, getWaypoints} = this\n      originInstance.search(start, end, {\n        startCity,\n        endCity,\n        waypoints: getWaypoints(waypoints)\n      })\n    },\n    getWaypoints (waypoints) {\n      const {BMap} = this\n      if (waypoints) {\n        return waypoints.map(position => getPosition(BMap, position))\n      }\n    },\n    load () {\n      const instance = this\n      const {map, BMap, location, policy, selectFirstResult, autoViewport, highlightMode, search, start, end, startCity, endCity, waypoints, originInstance, getWaypoints} = this\n      const _location = location ? isPoint(location) ? createPoint(BMap, location) : location : map\n      const route = this.originInstance = new BMap.DrivingRoute(_location, {\n        renderOptions: {\n          map,\n          // panel: panel && this.$el,\n          panel: this.$el,\n          selectFirstResult,\n          autoViewport,\n          highlightMode\n        },\n        policy: global[policy],\n        onSearchComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('searchcomplete', e)\n        },\n        onMarkersSet (e) {\n          instance.$emit('markersset', e)\n        },\n        onInfoHtmlSet (e) {\n          instance.$emit('infohtmlset', e)\n        },\n        onPolylinesSet (e) {\n          instance.$emit('polylinesset', e)\n        },\n        onResultsHtmlSet (e) {\n          instance.$emit('resultshtmlset', e)\n        }\n      })\n      search(getPosition(BMap, start), getPosition(BMap, end), {\n        startCity,\n        endCity,\n        waypoints: getWaypoints(waypoints)\n      })\n    }\n  }\n}\n</script>\n"]}]}