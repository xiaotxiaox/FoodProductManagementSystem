{"remainingRequest":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ConstructionConsultationSystem\\Frontend\\src\\views\\implement\\invest\\invest_tree\\invest_new_tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ConstructionConsultationSystem\\Frontend\\src\\views\\implement\\invest\\invest_tree\\invest_new_tree.vue","mtime":1572919019965},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import echarts from 'echarts'\n  import api from '../../../../api/implement'\n  import dapi from '../../../../api/decision'\n  import TreePlanModal from './components/TreePlanModal'\n  const a='A'\n  const columns = [\n    {\n      title: '建设项目总投资',\n      dataIndex: 'total_investment_of_construction_project',\n      width: '8%',\n      align: 'center'\n    },\n    {\n      title: '工程造价',\n      dataIndex: 'project_cost',\n      width: '8%',\n      align: 'center'\n    },\n    {\n      title: '增值税',\n      dataIndex: 'value_added_tax',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '资金筹措费',\n      dataIndex: 'fund_preparation_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '流动资金',\n      dataIndex: 'fluid_capital',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '工程费用',\n      dataIndex: 'project_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '工程建设其他费用',\n      dataIndex: 'project_construction_other_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '预备费',\n      dataIndex: 'prepare_fee',\n      width: '15%',\n      align: 'center'\n    },\n     {\n      title: '建筑工程费',\n      dataIndex: 'construction_work_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '安装工程费',\n      dataIndex: 'installation_work_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '设备预置费',\n      dataIndex: 'device_preset_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '土地使用费和其他补偿费',\n      dataIndex: 'land_use_fee',\n      width: '12%',\n      align: 'center'\n    },\n     {\n      title: '建设管理费',\n      dataIndex: 'construction_management_fee',\n      width: '15%',\n      align: 'center'\n    },\n     {\n      title: '可行性研究费',\n      dataIndex: 'feasibility_study_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '专项评价费',\n      dataIndex: 'special_evaluation_fee',\n      width: '8%',\n      align: 'center'\n    },\n      {\n      title: '研究试验费',\n      dataIndex: 'research_experiment_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '勘察设计费',\n      dataIndex: 'reconnaissance_design_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '场地准备费和临时设施费',\n      dataIndex: 'site_preparation_fee',\n      width: '12%',\n      align: 'center'\n    },\n     {\n      title: '引进技术和进口设备材料其他费',\n      dataIndex: 'imported_technology_fee',\n      width: '15%',\n      align: 'center'\n    },\n     {\n      title: '特殊设备安全监督检验费',\n      dataIndex: 'special_equipment_fee',\n      width: '12%',\n      align: 'center'\n    },\n         {\n      title: '市政公用配套设施费',\n      dataIndex: 'municipal_administration_fee',\n      width: '12%',\n      align: 'center'\n    },\n     {\n      title: '联合试运转费',\n      dataIndex: 'joint_commissioning_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '工程保险费',\n      dataIndex: 'engineer_insurance_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '专利及专有技术使用费',\n      dataIndex: 'patent_fee',\n      width: '15%',\n      align: 'center'\n    },\n      {\n      title: '生产准备费',\n      dataIndex: 'production_preparation_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '监理费',\n      dataIndex: 'supervisor_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '造价咨询',\n      dataIndex: 'cost_consultation_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '招标代理',\n      dataIndex: 'bid_agency_fee',\n      width: '8%',\n      align: 'center'\n    },\n     {\n      title: '其他',\n      dataIndex: 'other_fee',\n      width: '8%',\n      align: 'center'\n    },\n    {\n      title: '编辑',\n      dataIndex: 'operation',\n      scopedSlots: {customRender: 'operation'},\n      align: 'center'\n    }\n  ]\n\n  export default {\n    name: 'invest_new_tree',\n    components:{TreePlanModal},\n    props: {\n      className: {\n        type: String,\n        default: 'yourClassName',\n      },\n      id: Number,\n       estimate: String,\n       actual: String\n    },\n    data () {\n      return {\n        columns,\n        project_id: this.id,\n        card: {\n          construction_work_fee: null,\n          installation_work_fee: null,\n          device_preset_fee: null,\n          land_use_fee: null,\n          construction_management_fee: null,\n          feasibility_study_fee: null,\n          special_evaluation_fee: null,\n          research_experiment_fee: null,\n          reconnaissance_design_fee: null,\n          site_preparation_fee: null,\n          imported_technology_fee: null,\n          special_equipment_fee: null,\n          municipal_administration_fee: null,\n          joint_commissioning_fee: null,\n          engineer_insurance_fee: null,\n          patent_fee: null,\n          production_preparation_fee: null,\n          supervisor_fee: null,\n          cost_consultation_fee: null,\n          bid_agency_fee: null,\n          other_fee: null,\n          prepare_fee: null,\n          value_added_tax: null,\n          fund_preparation_fee: null,\n          fluid_capital: null,\n          project_construction_other_fee: null,\n          project_fee: null,\n          project_cost: null,\n          total_investment_of_construction_project: null\n        },\n        bid_card: {\n          save_rate: null,\n          bid_price: null,\n          control_price: null,\n          agency_fee: null\n        },\n        planModal:{\n          record: null,\n          visible: false,\n          type: '1',\n          tree_view_id: this.id\n        },\n         treeList: [],\n         applicationList: [],\n         decisionList:[],\n        designCompanyList:[],\n         process:{},\n         trees:{\n            all_paid_total: null,\n            consult_service_paid_total: null,\n            construction_paid_total: null,\n            other_paid_total: null,\n            bid_paid_total: null,\n            design_paid_total: null,\n            consultation_paid_total: null,\n            supervisor_paid_total: null,\n            general_contract_paid_total:null,\n            subcontract_paid_total:null\n         },\n         form: this.$form.createForm(this),\n        chart: null\n\n      }\n    },\n    mounted () {\n      this.getData()\n      this.chart = echarts.init(this.$refs.myEchart)\n       this.chart.showLoading()\n        this.chart.hideLoading()\n      this.initChart()\n\n    },\n    beforeDestroy () {\n      if (!this.chart) {\n        return\n      }\n      this.chart.dispose()\n      this.chart = null\n    },\n    methods: {\n      getData() {\n        api.getTreeList(this.$store.getters.projectSelected.id)\n        .then(data => {\n          console.log(data)\n          this.treeList = data\n          this.initChart()\n        })\n         api.getTrees(this.id)\n        .then(data => {\n          //console.log(data)\n          this.trees = data\n        })\n      api.getTreeSum(this.$store.getters.projectSelected.id)\n        .then(data => {\n\n          this.card = data\n          this.initChart()\n        })\n         api.getApplicationList(this.$store.getters.projectSelected.id)\n        .then(data => {\n          //console.log(data)\n          this.applicationList = data\n          this.initChart()\n        })\n        dapi.getDecisionList(this.$store.getters.projectSelected.id)\n        .then(data => {\n          this.decisionList = data.sort((x, y) => {\n            return x.decision_id > y.decision_id\n          })\n          this.initChart()\n        })\n         api.getBidSum(this.$store.getters.projectSelected.id)\n          .then(data => {\n            this.bid_card = data\n           this.initChart()\n          })\n        api.getDesignCompanyList(this.project_id)\n          .then(data => {\n            this.designCompanyList = data\n            this.initChart()\n          })\n\n\n      },\n      getAllPaidTotal (record, total) {\n        let all_paid_total = parseFloat(record.all_paid_total)\n        let actual = parseFloat(total.actual)\n        return `${(all_paid_total + actual).toFixed(2)}`\n      },\n      handlePlanEdit(record) {\n        this.planModal.type = 'edit'\n        this.planModal.record = record\n        this.planModal.visible = true\n        console.log(this.planModal.record)\n      },\n\n      handleCloseTable () {\n        this.planModal.type = ''\n        this.planModal.record = null\n        this.planModal.visible = false\n        this.getData()\n    },\n      initChart () {\n// 把配置和数据放这里\n        let app = {}\n        let option = null  //${(parseFloat(this.card.project_construction_other_fee) + parseFloat(this.decisionTotal.actual)).toFixed(2)}\n        let data = {\n          'name': `总投资：${(parseFloat(this.card.total_investment_of_construction_project) + parseFloat(this.decisionTotal.actual)+ parseFloat(this.applicationTotal.actual)+ parseFloat(this.bid_card.agency_fee)+ parseFloat(this.designTotal.paid_total)).toFixed(2)}元；总计划：${this.plan.total_investment_of_construction_project}元`,\n          'children': [\n            { 'name': `工程造价：实际：${(parseFloat(this.card.project_cost) + parseFloat(this.decisionTotal.actual)+ parseFloat(this.applicationTotal.actual)+ parseFloat(this.bid_card.agency_fee)+ parseFloat(this.designTotal.paid_total)).toFixed(2)}元；计划：${this.plan.project_cost}元` ,\n              'children': [\n                {\n                  'name': `工程费：实际：${this.card.project_fee}元；计划：${this.plan.project_fee}元`,\n                  'children': [\n                    { 'name': `建筑工程费：实际：${this.card.construction_work_fee}元；计划：${this.plan.construction_work_fee}元` },\n                    { 'name': `安装工程费：实际：${this.card.installation_work_fee}元；计划：${this.plan.installation_work_fee}元` },\n                    { 'name': `设置预备费：实际：${this.card.device_preset_fee}元；计划：${this.plan.device_preset_fee}元` }\n                  ]\n                },\n                { 'name': `工程建设其他费：实际：${(parseFloat(this.card.project_construction_other_fee) + parseFloat(this.decisionTotal.actual)+ parseFloat(this.applicationTotal.actual)+ parseFloat(this.bid_card.agency_fee)+ parseFloat(this.designTotal.paid_total)).toFixed(2)}元；计划：${this.plan.project_construction_other_fee}元`,\n                  'children': [\n                    { 'name': `土地使用费和其他补偿费：实际：${this.card.land_use_fee}元；计划：${this.plan.land_use_fee}元` },\n                    { 'name': `建设管理费：实际：${this.card.construction_management_fee}元；计划：${this.plan.construction_management_fee}元` },\n                    { 'name': `可行性研究费：实际：${this.decisionTotal.actual}元；计划：${this.plan.feasibility_study_fee}元` },\n                    { 'name': `专项评价费：实际：${this.card.special_evaluation_fee}元；计划：${this.plan.special_evaluation_fee}元` },\n                    { 'name': `研究试验费：实际：${this.card.research_experiment_fee}元；计划：${this.plan.research_experiment_fee}元` },\n                    { 'name': `勘察设计费：实际：${this.designTotal.paid_total}元；计划：${this.plan.reconnaissance_design_fee}元` },\n                    { 'name': `场地准备费和临时设施费：实际：${this.card.site_preparation_fee}元；计划：${this.plan.site_preparation_fee}元` },\n                    { 'name': `引进技术和进口设备材料其他费：实际：${this.card.imported_technology_fee}元；计划：${this.plan.imported_technology_fee}元` },\n                    { 'name': `特殊设备安全监督检验费：实际：${this.card.special_equipment_fee}元；计划：${this.plan.special_equipment_fee}元` },\n                    { 'name': `市政公用配套设施费：实际：${this.applicationTotal.actual}元；计划：${this.plan.municipal_administration_fee}元` },\n                    { 'name': `联合试运转费：实际：${this.card.joint_commissioning_fee}元；计划：${this.plan.joint_commissioning_fee}元` },\n                    { 'name': `工程保险费：实际：${this.card.engineer_insurance_fee}元；计划：${this.plan.engineer_insurance_fee}元` },\n                    { 'name': `专利及专有技术使用费：实际：${this.card.patent_fee}元；计划：${this.plan.patent_fee}元` },\n                    { 'name': `生产准备费：实际：${this.card.production_preparation_fee}元；计划：${this.plan.production_preparation_fee}元` },\n                    { 'name': `监理费：实际：${this.card.supervisor_fee}元；计划：${this.plan.supervisor_fee}元` },\n                    { 'name': `造价咨询：实际：${this.card.cost_consultation_fee}元；计划：${this.plan.cost_consultation_fee}元` },\n                    { 'name': `招标代理：实际：${this.bid_card.agency_fee}元；计划：${this.plan.bid_agency_fee}元` },\n                    { 'name': `其他：实际：${this.card.other_fee}元；计划：${this.plan.other_fee}元` },\n                  ]\n                },\n                { 'name': `预备费：实际：${this.card.prepare_fee}元；计划：${this.plan.prepare_fee}元` }\n              ]\n            },\n            {\n              'name': `增值税：实际：${this.card.value_added_tax}元；计划：${this.plan.value_added_tax}元`,\n            },\n            {\n              'name': `资金筹措费：实际：${this.card.fund_preparation_fee}元；计划：${this.plan.fund_preparation_fee}元`,\n            },\n            { 'name': `流动资金：实际：${this.card.fluid_capital}元；计划：${this.plan.fluid_capital}元` }\n          ]\n\n        }\n        echarts.util.each(data.children, function (datum, index) {\n          index % 2 === 0 && (datum.collapsed = true)\n        })\n        this.chart.setOption({\n          tooltip: {\n            trigger: 'item',\n            triggerOn: 'mousemove'\n          },\n          series: [\n            {\n              type: 'tree',\n\n              data: [data],\n\n              top: '1%',\n              left: '10%',\n              bottom: '1%',\n              right: '25%',\n\n              symbolSize: 10,\n\n              label: {\n                normal: {\n                  position: 'bottom',\n                  verticalAlign: 'middle',\n                  align: 'middle',\n                  fontSize: 10\n                }\n              },\n\n              leaves: {\n                label: {\n                  normal: {\n                    position: 'bottom',\n                    verticalAlign: 'middle',\n                    align: 'left'\n                  }\n                }\n              },\n\n              expandAndCollapse: true,\n              animationDuration: 550,\n              animationDurationUpdate: 750\n            }\n          ]\n\n        })\n        if (option && typeof option === 'object') {\n          this.chart.setOption(option, true)\n        }\n      }\n    },\n    computed: {\n      applicationTotal () {\n        let ret = {\n          estimate: '0',\n          actual: '0'\n        }\n        if (this.applicationList.length > 0) {\n          ret = {\n            estimate: this.applicationList.map((item) => {\n              return parseFloat(item.estimate)\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            actual: this.applicationList.map((item) => {\n              let actual = item.actual\n              if (actual) {\n                return parseFloat(actual)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2)\n          }\n        }\n        return ret\n      },\n      decisionTotal () {\n        let ret = {\n          estimate: '0',\n          actual: '0'\n        }\n        if (this.decisionList.length > 0) {\n          ret = {\n            estimate: this.decisionList.map((item) => {\n              return parseFloat(item.estimate)\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            actual: this.decisionList.map((item) => {\n              let actual = item.actual\n              if (actual) {\n                return parseFloat(actual)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2)\n          }\n        }\n        return ret\n      },\n      designTotal () {\n        let ret = {\n          paid_total: '0'\n        }\n        if (this.designCompanyList.length > 0) {\n          ret = {\n            paid_total: this.designCompanyList.map((item) => {\n              return parseFloat(item.paid_total)\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2)\n          }\n        }\n        return ret\n      },\n      plan () {\n        let cmp = {\n          construction_work_fee: '0',\n          installation_work_fee: '0',\n          device_preset_fee: '0',\n          land_use_fee: '0',\n          construction_management_fee: '0',\n          feasibility_study_fee: '0',\n          special_evaluation_fee: '0',\n          research_experiment_fee: '0',\n          reconnaissance_design_fee: '0',\n          site_preparation_fee: '0',\n          imported_technology_fee: '0',\n          special_equipment_fee: '0',\n          municipal_administration_fee: '0',\n          joint_commissioning_fee: '0',\n          engineer_insurance_fee: '0',\n          patent_fee: '0',\n          production_preparation_fee: '0',\n          supervisor_fee: '0',\n          cost_consultation_fee: '0',\n          bid_agency_fee: '0',\n          other_fee: '0',\n          prepare_fee: '0',\n          value_added_tax: '0',\n          fund_preparation_fee: '0',\n          fluid_capital: '0',\n          project_construction_other_fee: '0',\n          project_fee: '0',\n          project_cost: '0',\n          total_investment_of_construction_project: '0'\n        }\n        if (this.treeList.length > 0) {\n          cmp = {\n            construction_work_fee: this.treeList.map((item) => {\n              let construction_work_fee = item.construction_work_fee\n              if (construction_work_fee) {\n                return parseFloat(construction_work_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            installation_work_fee: this.treeList.map((item) => {\n              let installation_work_fee = item.installation_work_fee\n              if (installation_work_fee) {\n                return parseFloat(installation_work_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            device_preset_fee: this.treeList.map((item) => {\n              let device_preset_fee = item.device_preset_fee\n              if (device_preset_fee) {\n                return parseFloat(device_preset_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            land_use_fee: this.treeList.map((item) => {\n              let land_use_fee = item.land_use_fee\n              if (land_use_fee) {\n                return parseFloat(land_use_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            construction_management_fee: this.treeList.map((item) => {\n              let construction_management_fee = item.construction_management_fee\n              if (construction_management_fee) {\n                return parseFloat(construction_management_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            feasibility_study_fee: this.treeList.map((item) => {\n              let feasibility_study_fee = item.feasibility_study_fee\n              if (feasibility_study_fee) {\n                return parseFloat(feasibility_study_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            special_evaluation_fee: this.treeList.map((item) => {\n              let special_evaluation_fee = item.special_evaluation_fee\n              if (special_evaluation_fee) {\n                return parseFloat(special_evaluation_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            research_experiment_fee: this.treeList.map((item) => {\n              let research_experiment_fee = item.research_experiment_fee\n              if (research_experiment_fee) {\n                return parseFloat(research_experiment_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            reconnaissance_design_fee: this.treeList.map((item) => {\n              let reconnaissance_design_fee = item.reconnaissance_design_fee\n              if (reconnaissance_design_fee) {\n                return parseFloat(reconnaissance_design_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            site_preparation_fee: this.treeList.map((item) => {\n              let site_preparation_fee = item.site_preparation_fee\n              if (site_preparation_fee) {\n                return parseFloat(site_preparation_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            imported_technology_fee: this.treeList.map((item) => {\n              let imported_technology_fee = item.imported_technology_fee\n              if (imported_technology_fee) {\n                return parseFloat(imported_technology_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            special_equipment_fee: this.treeList.map((item) => {\n              let special_equipment_fee = item.special_equipment_fee\n              if (special_equipment_fee) {\n                return parseFloat(special_equipment_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            municipal_administration_fee: this.treeList.map((item) => {\n              let municipal_administration_fee = item.municipal_administration_fee\n              if (municipal_administration_fee) {\n                return parseFloat(municipal_administration_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            joint_commissioning_fee: this.treeList.map((item) => {\n              let joint_commissioning_fee = item.joint_commissioning_fee\n              if (joint_commissioning_fee) {\n                return parseFloat(joint_commissioning_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            engineer_insurance_fee: this.treeList.map((item) => {\n              let engineer_insurance_fee = item.engineer_insurance_fee\n              if (engineer_insurance_fee) {\n                return parseFloat(engineer_insurance_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            patent_fee: this.treeList.map((item) => {\n              let patent_fee = item.patent_fee\n              if (patent_fee) {\n                return parseFloat(patent_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            production_preparation_fee: this.treeList.map((item) => {\n              let production_preparation_fee = item.production_preparation_fee\n              if (production_preparation_fee) {\n                return parseFloat(production_preparation_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            supervisor_fee: this.treeList.map((item) => {\n              let supervisor_fee = item.supervisor_fee\n              if (supervisor_fee) {\n                return parseFloat(supervisor_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n           cost_consultation_fee: this.treeList.map((item) => {\n              let cost_consultation_fee = item.cost_consultation_fee\n              if (cost_consultation_fee) {\n                return parseFloat(cost_consultation_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n             bid_agency_fee: this.treeList.map((item) => {\n              let bid_agency_fee = item.bid_agency_fee\n              if (bid_agency_fee) {\n                return parseFloat(bid_agency_fee)\n              } else {\n                return 0\n              }\n             }).reduce((x, y) => {\n               return x + y\n             }).toFixed(2),\n            other_fee: this.treeList.map((item) => {\n              let other_fee = item.other_fee\n              if (other_fee) {\n                return parseFloat(other_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            prepare_fee: this.treeList.map((item) => {\n              let prepare_fee = item.prepare_fee\n              if (prepare_fee) {\n                return parseFloat(prepare_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            value_added_tax: this.treeList.map((item) => {\n              let value_added_tax = item.value_added_tax\n              if (value_added_tax) {\n                return parseFloat(value_added_tax)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            fund_preparation_fee: this.treeList.map((item) => {\n              let fund_preparation_fee = item.fund_preparation_fee\n              if (fund_preparation_fee) {\n                return parseFloat(fund_preparation_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            fluid_capital: this.treeList.map((item) => {\n              let fluid_capital = item.fluid_capital\n              if (fluid_capital) {\n                return parseFloat(fluid_capital)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            project_construction_other_fee: this.treeList.map((item) => {\n              let project_construction_other_fee = item.project_construction_other_fee\n              if (project_construction_other_fee) {\n                return parseFloat(project_construction_other_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            project_fee: this.treeList.map((item) => {\n              let project_fee = item.project_fee\n              if (project_fee) {\n                return parseFloat(project_fee)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            project_cost: this.treeList.map((item) => {\n              let project_cost = item.project_cost\n              if (project_cost) {\n                return parseFloat(project_cost)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2),\n            total_investment_of_construction_project: this.treeList.map((item) => {\n              let total_investment_of_construction_project = item.total_investment_of_construction_project\n              if (total_investment_of_construction_project) {\n                return parseFloat(total_investment_of_construction_project)\n              } else {\n                return 0\n              }\n            }).reduce((x, y) => {\n              return x + y\n            }).toFixed(2)\n\n          }\n        }\n        return cmp\n      }\n\n    }\n  }\n",{"version":3,"sources":["invest_new_tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"invest_new_tree.vue","sourceRoot":"src/views/implement/invest/invest_tree","sourcesContent":["<template>\r\n  <div>\r\n    <tree-plan-modal\r\n      :record=\"planModal.record\"\r\n      :visible=\"planModal.visible\"\r\n      :type=\"planModal.type\"\r\n      v-if=\"planModal.visible\"\r\n      :tree_view_id=\"planModal.tree_view_id\"\r\n      @close=\"handleCloseTable()\">\r\n    </tree-plan-modal>\r\n    <div>\r\n        <a-card>\r\n          <div :class=\"className\" :id=\"id\" style=\"width: 100%; height: 400px;\" ref=\"myEchart\"></div>\r\n        </a-card>\r\n    </div>\r\n     <a-card style=\"margin-bottom: 16px\">\r\n      <a-table\r\n          bordered\r\n          :columns=\"columns\"\r\n          :dataSource=\"treeList\"\r\n          rowKey=\"tree_view_id\"\r\n          :scroll=\"{x:1300}\"\r\n          :pagination=\"false\">\r\n          <template slot=\"operation\" slot-scope=\"text, record, index\">\r\n            <a-button @click=\"handlePlanEdit(record)\">编辑</a-button>\r\n          </template>\r\n        </a-table>\r\n      <a-col\r\n        :xs=\"{span: 24}\"\r\n        :sm=\"{span: 20, offset: 2}\"\r\n        :xl=\"{span: 16, offset: 4}\">\r\n      </a-col>\r\n    </a-card>\r\n\r\n  </div>\r\n\r\n</template>\r\n<script>\r\n  import echarts from 'echarts'\r\n  import api from '../../../../api/implement'\r\n  import dapi from '../../../../api/decision'\r\n  import TreePlanModal from './components/TreePlanModal'\r\n  const a='A'\r\n  const columns = [\r\n    {\r\n      title: '建设项目总投资',\r\n      dataIndex: 'total_investment_of_construction_project',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: '工程造价',\r\n      dataIndex: 'project_cost',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: '增值税',\r\n      dataIndex: 'value_added_tax',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '资金筹措费',\r\n      dataIndex: 'fund_preparation_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '流动资金',\r\n      dataIndex: 'fluid_capital',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '工程费用',\r\n      dataIndex: 'project_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '工程建设其他费用',\r\n      dataIndex: 'project_construction_other_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '预备费',\r\n      dataIndex: 'prepare_fee',\r\n      width: '15%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '建筑工程费',\r\n      dataIndex: 'construction_work_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '安装工程费',\r\n      dataIndex: 'installation_work_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '设备预置费',\r\n      dataIndex: 'device_preset_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '土地使用费和其他补偿费',\r\n      dataIndex: 'land_use_fee',\r\n      width: '12%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '建设管理费',\r\n      dataIndex: 'construction_management_fee',\r\n      width: '15%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '可行性研究费',\r\n      dataIndex: 'feasibility_study_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '专项评价费',\r\n      dataIndex: 'special_evaluation_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n      {\r\n      title: '研究试验费',\r\n      dataIndex: 'research_experiment_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '勘察设计费',\r\n      dataIndex: 'reconnaissance_design_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '场地准备费和临时设施费',\r\n      dataIndex: 'site_preparation_fee',\r\n      width: '12%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '引进技术和进口设备材料其他费',\r\n      dataIndex: 'imported_technology_fee',\r\n      width: '15%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '特殊设备安全监督检验费',\r\n      dataIndex: 'special_equipment_fee',\r\n      width: '12%',\r\n      align: 'center'\r\n    },\r\n         {\r\n      title: '市政公用配套设施费',\r\n      dataIndex: 'municipal_administration_fee',\r\n      width: '12%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '联合试运转费',\r\n      dataIndex: 'joint_commissioning_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '工程保险费',\r\n      dataIndex: 'engineer_insurance_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '专利及专有技术使用费',\r\n      dataIndex: 'patent_fee',\r\n      width: '15%',\r\n      align: 'center'\r\n    },\r\n      {\r\n      title: '生产准备费',\r\n      dataIndex: 'production_preparation_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '监理费',\r\n      dataIndex: 'supervisor_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '造价咨询',\r\n      dataIndex: 'cost_consultation_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '招标代理',\r\n      dataIndex: 'bid_agency_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n     {\r\n      title: '其他',\r\n      dataIndex: 'other_fee',\r\n      width: '8%',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: '编辑',\r\n      dataIndex: 'operation',\r\n      scopedSlots: {customRender: 'operation'},\r\n      align: 'center'\r\n    }\r\n  ]\r\n\r\n  export default {\r\n    name: 'invest_new_tree',\r\n    components:{TreePlanModal},\r\n    props: {\r\n      className: {\r\n        type: String,\r\n        default: 'yourClassName',\r\n      },\r\n      id: Number,\r\n       estimate: String,\r\n       actual: String\r\n    },\r\n    data () {\r\n      return {\r\n        columns,\r\n        project_id: this.id,\r\n        card: {\r\n          construction_work_fee: null,\r\n          installation_work_fee: null,\r\n          device_preset_fee: null,\r\n          land_use_fee: null,\r\n          construction_management_fee: null,\r\n          feasibility_study_fee: null,\r\n          special_evaluation_fee: null,\r\n          research_experiment_fee: null,\r\n          reconnaissance_design_fee: null,\r\n          site_preparation_fee: null,\r\n          imported_technology_fee: null,\r\n          special_equipment_fee: null,\r\n          municipal_administration_fee: null,\r\n          joint_commissioning_fee: null,\r\n          engineer_insurance_fee: null,\r\n          patent_fee: null,\r\n          production_preparation_fee: null,\r\n          supervisor_fee: null,\r\n          cost_consultation_fee: null,\r\n          bid_agency_fee: null,\r\n          other_fee: null,\r\n          prepare_fee: null,\r\n          value_added_tax: null,\r\n          fund_preparation_fee: null,\r\n          fluid_capital: null,\r\n          project_construction_other_fee: null,\r\n          project_fee: null,\r\n          project_cost: null,\r\n          total_investment_of_construction_project: null\r\n        },\r\n        bid_card: {\r\n          save_rate: null,\r\n          bid_price: null,\r\n          control_price: null,\r\n          agency_fee: null\r\n        },\r\n        planModal:{\r\n          record: null,\r\n          visible: false,\r\n          type: '1',\r\n          tree_view_id: this.id\r\n        },\r\n         treeList: [],\r\n         applicationList: [],\r\n         decisionList:[],\r\n        designCompanyList:[],\r\n         process:{},\r\n         trees:{\r\n            all_paid_total: null,\r\n            consult_service_paid_total: null,\r\n            construction_paid_total: null,\r\n            other_paid_total: null,\r\n            bid_paid_total: null,\r\n            design_paid_total: null,\r\n            consultation_paid_total: null,\r\n            supervisor_paid_total: null,\r\n            general_contract_paid_total:null,\r\n            subcontract_paid_total:null\r\n         },\r\n         form: this.$form.createForm(this),\r\n        chart: null\r\n\r\n      }\r\n    },\r\n    mounted () {\r\n      this.getData()\r\n      this.chart = echarts.init(this.$refs.myEchart)\r\n       this.chart.showLoading()\r\n        this.chart.hideLoading()\r\n      this.initChart()\r\n\r\n    },\r\n    beforeDestroy () {\r\n      if (!this.chart) {\r\n        return\r\n      }\r\n      this.chart.dispose()\r\n      this.chart = null\r\n    },\r\n    methods: {\r\n      getData() {\r\n        api.getTreeList(this.$store.getters.projectSelected.id)\r\n        .then(data => {\r\n          console.log(data)\r\n          this.treeList = data\r\n          this.initChart()\r\n        })\r\n         api.getTrees(this.id)\r\n        .then(data => {\r\n          //console.log(data)\r\n          this.trees = data\r\n        })\r\n      api.getTreeSum(this.$store.getters.projectSelected.id)\r\n        .then(data => {\r\n\r\n          this.card = data\r\n          this.initChart()\r\n        })\r\n         api.getApplicationList(this.$store.getters.projectSelected.id)\r\n        .then(data => {\r\n          //console.log(data)\r\n          this.applicationList = data\r\n          this.initChart()\r\n        })\r\n        dapi.getDecisionList(this.$store.getters.projectSelected.id)\r\n        .then(data => {\r\n          this.decisionList = data.sort((x, y) => {\r\n            return x.decision_id > y.decision_id\r\n          })\r\n          this.initChart()\r\n        })\r\n         api.getBidSum(this.$store.getters.projectSelected.id)\r\n          .then(data => {\r\n            this.bid_card = data\r\n           this.initChart()\r\n          })\r\n        api.getDesignCompanyList(this.project_id)\r\n          .then(data => {\r\n            this.designCompanyList = data\r\n            this.initChart()\r\n          })\r\n\r\n\r\n      },\r\n      getAllPaidTotal (record, total) {\r\n        let all_paid_total = parseFloat(record.all_paid_total)\r\n        let actual = parseFloat(total.actual)\r\n        return `${(all_paid_total + actual).toFixed(2)}`\r\n      },\r\n      handlePlanEdit(record) {\r\n        this.planModal.type = 'edit'\r\n        this.planModal.record = record\r\n        this.planModal.visible = true\r\n        console.log(this.planModal.record)\r\n      },\r\n\r\n      handleCloseTable () {\r\n        this.planModal.type = ''\r\n        this.planModal.record = null\r\n        this.planModal.visible = false\r\n        this.getData()\r\n    },\r\n      initChart () {\r\n// 把配置和数据放这里\r\n        let app = {}\r\n        let option = null  //${(parseFloat(this.card.project_construction_other_fee) + parseFloat(this.decisionTotal.actual)).toFixed(2)}\r\n        let data = {\r\n          'name': `总投资：${(parseFloat(this.card.total_investment_of_construction_project) + parseFloat(this.decisionTotal.actual)+ parseFloat(this.applicationTotal.actual)+ parseFloat(this.bid_card.agency_fee)+ parseFloat(this.designTotal.paid_total)).toFixed(2)}元；总计划：${this.plan.total_investment_of_construction_project}元`,\r\n          'children': [\r\n            { 'name': `工程造价：实际：${(parseFloat(this.card.project_cost) + parseFloat(this.decisionTotal.actual)+ parseFloat(this.applicationTotal.actual)+ parseFloat(this.bid_card.agency_fee)+ parseFloat(this.designTotal.paid_total)).toFixed(2)}元；计划：${this.plan.project_cost}元` ,\r\n              'children': [\r\n                {\r\n                  'name': `工程费：实际：${this.card.project_fee}元；计划：${this.plan.project_fee}元`,\r\n                  'children': [\r\n                    { 'name': `建筑工程费：实际：${this.card.construction_work_fee}元；计划：${this.plan.construction_work_fee}元` },\r\n                    { 'name': `安装工程费：实际：${this.card.installation_work_fee}元；计划：${this.plan.installation_work_fee}元` },\r\n                    { 'name': `设置预备费：实际：${this.card.device_preset_fee}元；计划：${this.plan.device_preset_fee}元` }\r\n                  ]\r\n                },\r\n                { 'name': `工程建设其他费：实际：${(parseFloat(this.card.project_construction_other_fee) + parseFloat(this.decisionTotal.actual)+ parseFloat(this.applicationTotal.actual)+ parseFloat(this.bid_card.agency_fee)+ parseFloat(this.designTotal.paid_total)).toFixed(2)}元；计划：${this.plan.project_construction_other_fee}元`,\r\n                  'children': [\r\n                    { 'name': `土地使用费和其他补偿费：实际：${this.card.land_use_fee}元；计划：${this.plan.land_use_fee}元` },\r\n                    { 'name': `建设管理费：实际：${this.card.construction_management_fee}元；计划：${this.plan.construction_management_fee}元` },\r\n                    { 'name': `可行性研究费：实际：${this.decisionTotal.actual}元；计划：${this.plan.feasibility_study_fee}元` },\r\n                    { 'name': `专项评价费：实际：${this.card.special_evaluation_fee}元；计划：${this.plan.special_evaluation_fee}元` },\r\n                    { 'name': `研究试验费：实际：${this.card.research_experiment_fee}元；计划：${this.plan.research_experiment_fee}元` },\r\n                    { 'name': `勘察设计费：实际：${this.designTotal.paid_total}元；计划：${this.plan.reconnaissance_design_fee}元` },\r\n                    { 'name': `场地准备费和临时设施费：实际：${this.card.site_preparation_fee}元；计划：${this.plan.site_preparation_fee}元` },\r\n                    { 'name': `引进技术和进口设备材料其他费：实际：${this.card.imported_technology_fee}元；计划：${this.plan.imported_technology_fee}元` },\r\n                    { 'name': `特殊设备安全监督检验费：实际：${this.card.special_equipment_fee}元；计划：${this.plan.special_equipment_fee}元` },\r\n                    { 'name': `市政公用配套设施费：实际：${this.applicationTotal.actual}元；计划：${this.plan.municipal_administration_fee}元` },\r\n                    { 'name': `联合试运转费：实际：${this.card.joint_commissioning_fee}元；计划：${this.plan.joint_commissioning_fee}元` },\r\n                    { 'name': `工程保险费：实际：${this.card.engineer_insurance_fee}元；计划：${this.plan.engineer_insurance_fee}元` },\r\n                    { 'name': `专利及专有技术使用费：实际：${this.card.patent_fee}元；计划：${this.plan.patent_fee}元` },\r\n                    { 'name': `生产准备费：实际：${this.card.production_preparation_fee}元；计划：${this.plan.production_preparation_fee}元` },\r\n                    { 'name': `监理费：实际：${this.card.supervisor_fee}元；计划：${this.plan.supervisor_fee}元` },\r\n                    { 'name': `造价咨询：实际：${this.card.cost_consultation_fee}元；计划：${this.plan.cost_consultation_fee}元` },\r\n                    { 'name': `招标代理：实际：${this.bid_card.agency_fee}元；计划：${this.plan.bid_agency_fee}元` },\r\n                    { 'name': `其他：实际：${this.card.other_fee}元；计划：${this.plan.other_fee}元` },\r\n                  ]\r\n                },\r\n                { 'name': `预备费：实际：${this.card.prepare_fee}元；计划：${this.plan.prepare_fee}元` }\r\n              ]\r\n            },\r\n            {\r\n              'name': `增值税：实际：${this.card.value_added_tax}元；计划：${this.plan.value_added_tax}元`,\r\n            },\r\n            {\r\n              'name': `资金筹措费：实际：${this.card.fund_preparation_fee}元；计划：${this.plan.fund_preparation_fee}元`,\r\n            },\r\n            { 'name': `流动资金：实际：${this.card.fluid_capital}元；计划：${this.plan.fluid_capital}元` }\r\n          ]\r\n\r\n        }\r\n        echarts.util.each(data.children, function (datum, index) {\r\n          index % 2 === 0 && (datum.collapsed = true)\r\n        })\r\n        this.chart.setOption({\r\n          tooltip: {\r\n            trigger: 'item',\r\n            triggerOn: 'mousemove'\r\n          },\r\n          series: [\r\n            {\r\n              type: 'tree',\r\n\r\n              data: [data],\r\n\r\n              top: '1%',\r\n              left: '10%',\r\n              bottom: '1%',\r\n              right: '25%',\r\n\r\n              symbolSize: 10,\r\n\r\n              label: {\r\n                normal: {\r\n                  position: 'bottom',\r\n                  verticalAlign: 'middle',\r\n                  align: 'middle',\r\n                  fontSize: 10\r\n                }\r\n              },\r\n\r\n              leaves: {\r\n                label: {\r\n                  normal: {\r\n                    position: 'bottom',\r\n                    verticalAlign: 'middle',\r\n                    align: 'left'\r\n                  }\r\n                }\r\n              },\r\n\r\n              expandAndCollapse: true,\r\n              animationDuration: 550,\r\n              animationDurationUpdate: 750\r\n            }\r\n          ]\r\n\r\n        })\r\n        if (option && typeof option === 'object') {\r\n          this.chart.setOption(option, true)\r\n        }\r\n      }\r\n    },\r\n    computed: {\r\n      applicationTotal () {\r\n        let ret = {\r\n          estimate: '0',\r\n          actual: '0'\r\n        }\r\n        if (this.applicationList.length > 0) {\r\n          ret = {\r\n            estimate: this.applicationList.map((item) => {\r\n              return parseFloat(item.estimate)\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            actual: this.applicationList.map((item) => {\r\n              let actual = item.actual\r\n              if (actual) {\r\n                return parseFloat(actual)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2)\r\n          }\r\n        }\r\n        return ret\r\n      },\r\n      decisionTotal () {\r\n        let ret = {\r\n          estimate: '0',\r\n          actual: '0'\r\n        }\r\n        if (this.decisionList.length > 0) {\r\n          ret = {\r\n            estimate: this.decisionList.map((item) => {\r\n              return parseFloat(item.estimate)\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            actual: this.decisionList.map((item) => {\r\n              let actual = item.actual\r\n              if (actual) {\r\n                return parseFloat(actual)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2)\r\n          }\r\n        }\r\n        return ret\r\n      },\r\n      designTotal () {\r\n        let ret = {\r\n          paid_total: '0'\r\n        }\r\n        if (this.designCompanyList.length > 0) {\r\n          ret = {\r\n            paid_total: this.designCompanyList.map((item) => {\r\n              return parseFloat(item.paid_total)\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2)\r\n          }\r\n        }\r\n        return ret\r\n      },\r\n      plan () {\r\n        let cmp = {\r\n          construction_work_fee: '0',\r\n          installation_work_fee: '0',\r\n          device_preset_fee: '0',\r\n          land_use_fee: '0',\r\n          construction_management_fee: '0',\r\n          feasibility_study_fee: '0',\r\n          special_evaluation_fee: '0',\r\n          research_experiment_fee: '0',\r\n          reconnaissance_design_fee: '0',\r\n          site_preparation_fee: '0',\r\n          imported_technology_fee: '0',\r\n          special_equipment_fee: '0',\r\n          municipal_administration_fee: '0',\r\n          joint_commissioning_fee: '0',\r\n          engineer_insurance_fee: '0',\r\n          patent_fee: '0',\r\n          production_preparation_fee: '0',\r\n          supervisor_fee: '0',\r\n          cost_consultation_fee: '0',\r\n          bid_agency_fee: '0',\r\n          other_fee: '0',\r\n          prepare_fee: '0',\r\n          value_added_tax: '0',\r\n          fund_preparation_fee: '0',\r\n          fluid_capital: '0',\r\n          project_construction_other_fee: '0',\r\n          project_fee: '0',\r\n          project_cost: '0',\r\n          total_investment_of_construction_project: '0'\r\n        }\r\n        if (this.treeList.length > 0) {\r\n          cmp = {\r\n            construction_work_fee: this.treeList.map((item) => {\r\n              let construction_work_fee = item.construction_work_fee\r\n              if (construction_work_fee) {\r\n                return parseFloat(construction_work_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            installation_work_fee: this.treeList.map((item) => {\r\n              let installation_work_fee = item.installation_work_fee\r\n              if (installation_work_fee) {\r\n                return parseFloat(installation_work_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            device_preset_fee: this.treeList.map((item) => {\r\n              let device_preset_fee = item.device_preset_fee\r\n              if (device_preset_fee) {\r\n                return parseFloat(device_preset_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            land_use_fee: this.treeList.map((item) => {\r\n              let land_use_fee = item.land_use_fee\r\n              if (land_use_fee) {\r\n                return parseFloat(land_use_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            construction_management_fee: this.treeList.map((item) => {\r\n              let construction_management_fee = item.construction_management_fee\r\n              if (construction_management_fee) {\r\n                return parseFloat(construction_management_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            feasibility_study_fee: this.treeList.map((item) => {\r\n              let feasibility_study_fee = item.feasibility_study_fee\r\n              if (feasibility_study_fee) {\r\n                return parseFloat(feasibility_study_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            special_evaluation_fee: this.treeList.map((item) => {\r\n              let special_evaluation_fee = item.special_evaluation_fee\r\n              if (special_evaluation_fee) {\r\n                return parseFloat(special_evaluation_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            research_experiment_fee: this.treeList.map((item) => {\r\n              let research_experiment_fee = item.research_experiment_fee\r\n              if (research_experiment_fee) {\r\n                return parseFloat(research_experiment_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            reconnaissance_design_fee: this.treeList.map((item) => {\r\n              let reconnaissance_design_fee = item.reconnaissance_design_fee\r\n              if (reconnaissance_design_fee) {\r\n                return parseFloat(reconnaissance_design_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            site_preparation_fee: this.treeList.map((item) => {\r\n              let site_preparation_fee = item.site_preparation_fee\r\n              if (site_preparation_fee) {\r\n                return parseFloat(site_preparation_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            imported_technology_fee: this.treeList.map((item) => {\r\n              let imported_technology_fee = item.imported_technology_fee\r\n              if (imported_technology_fee) {\r\n                return parseFloat(imported_technology_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            special_equipment_fee: this.treeList.map((item) => {\r\n              let special_equipment_fee = item.special_equipment_fee\r\n              if (special_equipment_fee) {\r\n                return parseFloat(special_equipment_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            municipal_administration_fee: this.treeList.map((item) => {\r\n              let municipal_administration_fee = item.municipal_administration_fee\r\n              if (municipal_administration_fee) {\r\n                return parseFloat(municipal_administration_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            joint_commissioning_fee: this.treeList.map((item) => {\r\n              let joint_commissioning_fee = item.joint_commissioning_fee\r\n              if (joint_commissioning_fee) {\r\n                return parseFloat(joint_commissioning_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            engineer_insurance_fee: this.treeList.map((item) => {\r\n              let engineer_insurance_fee = item.engineer_insurance_fee\r\n              if (engineer_insurance_fee) {\r\n                return parseFloat(engineer_insurance_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            patent_fee: this.treeList.map((item) => {\r\n              let patent_fee = item.patent_fee\r\n              if (patent_fee) {\r\n                return parseFloat(patent_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            production_preparation_fee: this.treeList.map((item) => {\r\n              let production_preparation_fee = item.production_preparation_fee\r\n              if (production_preparation_fee) {\r\n                return parseFloat(production_preparation_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            supervisor_fee: this.treeList.map((item) => {\r\n              let supervisor_fee = item.supervisor_fee\r\n              if (supervisor_fee) {\r\n                return parseFloat(supervisor_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n           cost_consultation_fee: this.treeList.map((item) => {\r\n              let cost_consultation_fee = item.cost_consultation_fee\r\n              if (cost_consultation_fee) {\r\n                return parseFloat(cost_consultation_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n             bid_agency_fee: this.treeList.map((item) => {\r\n              let bid_agency_fee = item.bid_agency_fee\r\n              if (bid_agency_fee) {\r\n                return parseFloat(bid_agency_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n             }).reduce((x, y) => {\r\n               return x + y\r\n             }).toFixed(2),\r\n            other_fee: this.treeList.map((item) => {\r\n              let other_fee = item.other_fee\r\n              if (other_fee) {\r\n                return parseFloat(other_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            prepare_fee: this.treeList.map((item) => {\r\n              let prepare_fee = item.prepare_fee\r\n              if (prepare_fee) {\r\n                return parseFloat(prepare_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            value_added_tax: this.treeList.map((item) => {\r\n              let value_added_tax = item.value_added_tax\r\n              if (value_added_tax) {\r\n                return parseFloat(value_added_tax)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            fund_preparation_fee: this.treeList.map((item) => {\r\n              let fund_preparation_fee = item.fund_preparation_fee\r\n              if (fund_preparation_fee) {\r\n                return parseFloat(fund_preparation_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            fluid_capital: this.treeList.map((item) => {\r\n              let fluid_capital = item.fluid_capital\r\n              if (fluid_capital) {\r\n                return parseFloat(fluid_capital)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            project_construction_other_fee: this.treeList.map((item) => {\r\n              let project_construction_other_fee = item.project_construction_other_fee\r\n              if (project_construction_other_fee) {\r\n                return parseFloat(project_construction_other_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            project_fee: this.treeList.map((item) => {\r\n              let project_fee = item.project_fee\r\n              if (project_fee) {\r\n                return parseFloat(project_fee)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            project_cost: this.treeList.map((item) => {\r\n              let project_cost = item.project_cost\r\n              if (project_cost) {\r\n                return parseFloat(project_cost)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2),\r\n            total_investment_of_construction_project: this.treeList.map((item) => {\r\n              let total_investment_of_construction_project = item.total_investment_of_construction_project\r\n              if (total_investment_of_construction_project) {\r\n                return parseFloat(total_investment_of_construction_project)\r\n              } else {\r\n                return 0\r\n              }\r\n            }).reduce((x, y) => {\r\n              return x + y\r\n            }).toFixed(2)\r\n\r\n          }\r\n        }\r\n        return cmp\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n<style scoped>\r\n\r\n</style>"]}]}