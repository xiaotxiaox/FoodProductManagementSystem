{"remainingRequest":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\overlays\\InfoWindow.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\overlays\\InfoWindow.vue","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\ConstructionConsultationSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createPoint, createSize} from '../base/factory.js'\n\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show (val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow()\n    },\n    'position.lng' (val, oldVal) {\n      this.reload()\n    },\n    'position.lat' (val, oldVal) {\n      this.reload()\n    },\n    'offset.width' (val, oldVal) {\n      this.reload()\n    },\n    'offset.height' (val) {\n      this.reload()\n    },\n    maxWidth () {\n      this.reload()\n    },\n    width (val) {\n      this.originInstance.setWidth(val)\n    },\n    height (val) {\n      this.originInstance.setHeight(val)\n    },\n    title (val) {\n      this.originInstance.setTitle(val)\n    },\n    maximize (val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize()\n    },\n    autoPan (val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan()\n    },\n    closeOnClick (val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick()\n    }\n  },\n  methods: {\n    redraw () {\n      this.originInstance.redraw()\n    },\n    load () {\n      const {BMap, map, show, title, width, height, maxWidth, offset, autoPan, closeOnClick, message, maximize, bindObserver, $parent} = this\n      const $content = this.$el\n      const overlay = new BMap.InfoWindow($content, {\n        width,\n        height,\n        title,\n        maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message\n      })\n\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize()\n      bindEvents.call(this, overlay)\n      this.originInstance = overlay\n      overlay.redraw()\n      ;[].forEach.call($content.querySelectorAll('img'), $img => {\n        $img.onload = () => overlay.redraw()\n      })\n      bindObserver()\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map\n      show && this.openInfoWindow()\n    },\n    bindObserver () {\n      const MutationObserver = global.MutationObserver\n      if (!MutationObserver) {\n        return\n      }\n      const {$el, originInstance} = this\n      this.observer = new MutationObserver(mutations => originInstance.redraw())\n      this.observer.observe($el, {attributes: true, childList: true, characterData: true, subtree: true})\n    },\n    openInfoWindow () {\n      const {BMap, $container, position, originInstance} = this\n      $container.openInfoWindow(originInstance, createPoint(BMap, position))\n    },\n    closeInfoWindow () {\n      this.$container.closeInfoWindow(this.originInstance)\n    }\n  }\n}\n",{"version":3,"sources":["InfoWindow.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InfoWindow.vue","sourceRoot":"node_modules/vue-baidu-map/components/overlays","sourcesContent":["<template>\n<div v-show=\"show\">\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createPoint, createSize} from '../base/factory.js'\n\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show (val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow()\n    },\n    'position.lng' (val, oldVal) {\n      this.reload()\n    },\n    'position.lat' (val, oldVal) {\n      this.reload()\n    },\n    'offset.width' (val, oldVal) {\n      this.reload()\n    },\n    'offset.height' (val) {\n      this.reload()\n    },\n    maxWidth () {\n      this.reload()\n    },\n    width (val) {\n      this.originInstance.setWidth(val)\n    },\n    height (val) {\n      this.originInstance.setHeight(val)\n    },\n    title (val) {\n      this.originInstance.setTitle(val)\n    },\n    maximize (val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize()\n    },\n    autoPan (val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan()\n    },\n    closeOnClick (val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick()\n    }\n  },\n  methods: {\n    redraw () {\n      this.originInstance.redraw()\n    },\n    load () {\n      const {BMap, map, show, title, width, height, maxWidth, offset, autoPan, closeOnClick, message, maximize, bindObserver, $parent} = this\n      const $content = this.$el\n      const overlay = new BMap.InfoWindow($content, {\n        width,\n        height,\n        title,\n        maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message\n      })\n\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize()\n      bindEvents.call(this, overlay)\n      this.originInstance = overlay\n      overlay.redraw()\n      ;[].forEach.call($content.querySelectorAll('img'), $img => {\n        $img.onload = () => overlay.redraw()\n      })\n      bindObserver()\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map\n      show && this.openInfoWindow()\n    },\n    bindObserver () {\n      const MutationObserver = global.MutationObserver\n      if (!MutationObserver) {\n        return\n      }\n      const {$el, originInstance} = this\n      this.observer = new MutationObserver(mutations => originInstance.redraw())\n      this.observer.observe($el, {attributes: true, childList: true, characterData: true, subtree: true})\n    },\n    openInfoWindow () {\n      const {BMap, $container, position, originInstance} = this\n      $container.openInfoWindow(originInstance, createPoint(BMap, position))\n    },\n    closeInfoWindow () {\n      this.$container.closeInfoWindow(this.originInstance)\n    }\n  }\n}\n</script>\n"]}]}