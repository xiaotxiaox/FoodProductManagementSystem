{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\search\\LocalSearch.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\search\\LocalSearch.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport {createPoint, createBounds} from '../base/factory.js'\nimport {isPoint} from '../base/util.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bm-local-search',\n  mixins: [commonMixin('search')],\n  props: {\n    location: {\n      type: [Object, String]\n    },\n    keyword: {\n      type: [Array, String]\n    },\n    panel: {\n      type: Boolean,\n      default: true\n    },\n    forceLocal: {\n      type: Boolean\n    },\n    customData: {\n      type: Object\n    },\n    bounds: {\n      type: Object\n    },\n    nearby: {\n      type: Object\n    },\n    // page: {\n    //   type: Number\n    // },\n    pageCapacity: {\n      type: Number\n    },\n    autoViewport: {\n      type: Boolean\n    },\n    selectFirstResult: {\n      type: Boolean\n    }\n  },\n  watch: {\n    location: {\n      handler (val) {\n        const {originInstance, search} = this\n        originInstance.setLocation(val || this.map)\n        search()\n      },\n      deep: true\n    },\n    keyword () {\n      this.search()\n    },\n    bounds: {\n      handler (val) {\n        const {searchInBounds} = this\n        searchInBounds(val)\n      },\n      deep: true\n    },\n    nearby: {\n      handler (val) {\n        const {searchNearby} = this\n        searchNearby(val)\n      },\n      deep: true\n    },\n    forceLocal () {\n      this.reload()\n    },\n    customData: {\n      deep: true,\n      handler () {\n        this.reload()\n      }\n    },\n    // panel () {\n    //   this.reload()\n    // },\n    pageCapacity (val) {\n      this.originInstance && this.originInstance.setPageCapacity(val)\n    },\n    autoViewport (val) {\n      this.originInstance && (val ? this.originInstance.enableAutoViewport() : this.originInstance.disableAutoViewport())\n    },\n    selectFirstResult (val) {\n      this.originInstance && (val ? this.originInstance.enableFirstResultSelection() : this.originInstance.disableFirstResultSelection())\n    },\n    highlightMode () {\n      this.reload()\n    }\n  },\n  methods: {\n    searchNearby (nearby) {\n      const {originInstance, keyword, customData, BMap} = this\n      originInstance.searchNearby(keyword, createPoint(BMap, nearby.center), nearby.radius, customData)\n    },\n    searchInBounds (bounds) {\n      const {originInstance, keyword, customData, BMap} = this\n      originInstance.searchInBounds(keyword, createBounds(BMap, bounds), customData)\n    },\n    search () {\n      const {originInstance, keyword, forceLocal, customData, nearby, bounds, searchNearby, searchInBounds} = this\n      nearby ? searchNearby(nearby) : bounds ? searchInBounds(bounds) : originInstance.search(keyword, {\n        forceLocal,\n        customData\n      })\n    },\n    load () {\n      const instance = this\n      const {map, BMap, search, pageCapacity, autoViewport, selectFirstResult, highlightMode, location, originInstance} = this\n      const _location = location ? isPoint(location) ? createPoint(BMap, location) : location : map\n      const route = this.originInstance = new BMap.LocalSearch(_location, {\n        onMarkersSet (e) {\n          instance.$emit('markersset', e)\n        },\n        onInfoHtmlSet (e) {\n          instance.$emit('infohtmlset', e)\n        },\n        onResultsHtmlSet (e) {\n          instance.$emit('resultshtmlset', e)\n        },\n        onSearchComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('searchcomplete', e)\n        },\n        pageCapacity: pageCapacity,\n        renderOptions: {\n          map,\n          // panel: panel && this.$el,\n          panel: this.$el,\n          selectFirstResult,\n          autoViewport,\n          highlightMode\n        }\n      })\n      search()\n    }\n  }\n}\n",{"version":3,"sources":["LocalSearch.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LocalSearch.vue","sourceRoot":"node_modules/vue-baidu-map/components/search","sourcesContent":["<template>\n<div v-show=\"panel\">\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport {createPoint, createBounds} from '../base/factory.js'\nimport {isPoint} from '../base/util.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bm-local-search',\n  mixins: [commonMixin('search')],\n  props: {\n    location: {\n      type: [Object, String]\n    },\n    keyword: {\n      type: [Array, String]\n    },\n    panel: {\n      type: Boolean,\n      default: true\n    },\n    forceLocal: {\n      type: Boolean\n    },\n    customData: {\n      type: Object\n    },\n    bounds: {\n      type: Object\n    },\n    nearby: {\n      type: Object\n    },\n    // page: {\n    //   type: Number\n    // },\n    pageCapacity: {\n      type: Number\n    },\n    autoViewport: {\n      type: Boolean\n    },\n    selectFirstResult: {\n      type: Boolean\n    }\n  },\n  watch: {\n    location: {\n      handler (val) {\n        const {originInstance, search} = this\n        originInstance.setLocation(val || this.map)\n        search()\n      },\n      deep: true\n    },\n    keyword () {\n      this.search()\n    },\n    bounds: {\n      handler (val) {\n        const {searchInBounds} = this\n        searchInBounds(val)\n      },\n      deep: true\n    },\n    nearby: {\n      handler (val) {\n        const {searchNearby} = this\n        searchNearby(val)\n      },\n      deep: true\n    },\n    forceLocal () {\n      this.reload()\n    },\n    customData: {\n      deep: true,\n      handler () {\n        this.reload()\n      }\n    },\n    // panel () {\n    //   this.reload()\n    // },\n    pageCapacity (val) {\n      this.originInstance && this.originInstance.setPageCapacity(val)\n    },\n    autoViewport (val) {\n      this.originInstance && (val ? this.originInstance.enableAutoViewport() : this.originInstance.disableAutoViewport())\n    },\n    selectFirstResult (val) {\n      this.originInstance && (val ? this.originInstance.enableFirstResultSelection() : this.originInstance.disableFirstResultSelection())\n    },\n    highlightMode () {\n      this.reload()\n    }\n  },\n  methods: {\n    searchNearby (nearby) {\n      const {originInstance, keyword, customData, BMap} = this\n      originInstance.searchNearby(keyword, createPoint(BMap, nearby.center), nearby.radius, customData)\n    },\n    searchInBounds (bounds) {\n      const {originInstance, keyword, customData, BMap} = this\n      originInstance.searchInBounds(keyword, createBounds(BMap, bounds), customData)\n    },\n    search () {\n      const {originInstance, keyword, forceLocal, customData, nearby, bounds, searchNearby, searchInBounds} = this\n      nearby ? searchNearby(nearby) : bounds ? searchInBounds(bounds) : originInstance.search(keyword, {\n        forceLocal,\n        customData\n      })\n    },\n    load () {\n      const instance = this\n      const {map, BMap, search, pageCapacity, autoViewport, selectFirstResult, highlightMode, location, originInstance} = this\n      const _location = location ? isPoint(location) ? createPoint(BMap, location) : location : map\n      const route = this.originInstance = new BMap.LocalSearch(_location, {\n        onMarkersSet (e) {\n          instance.$emit('markersset', e)\n        },\n        onInfoHtmlSet (e) {\n          instance.$emit('infohtmlset', e)\n        },\n        onResultsHtmlSet (e) {\n          instance.$emit('resultshtmlset', e)\n        },\n        onSearchComplete (e) {\n          if (originInstance && originInstance !== route) {\n            originInstance.clearResults()\n          }\n          instance.$emit('searchcomplete', e)\n        },\n        pageCapacity: pageCapacity,\n        renderOptions: {\n          map,\n          // panel: panel && this.$el,\n          panel: this.$el,\n          selectFirstResult,\n          autoViewport,\n          highlightMode\n        }\n      })\n      search()\n    }\n  }\n}\n</script>\n"]}]}