{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\extra\\MarkerClusterer.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-baidu-map\\components\\extra\\MarkerClusterer.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport MarkerClusterer from 'bmaplib.markerclusterer'\nimport {createSize} from '../base/factory.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bml-marker-clusterer',\n  mixins: [commonMixin('markerClusterer')],\n  props: {\n    gridSize: {\n      type: Object\n    },\n    maxZoom: {\n      type: Number\n    },\n    minClusterSize: {\n      type: Number\n    },\n    styles: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    averageCenter: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    gridSize: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        originInstance.setGridSize(BMap, val.map)\n      },\n      deep: true\n    },\n    maxZoom (val) {\n      const {originInstance} = this\n      originInstance.setMaxZoom(val)\n    },\n    minClusterSize: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        originInstance.setMinClusterSize(createSize(BMap, val))\n      },\n      deep: true\n    },\n    styles: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        const obj = JSON.parse(JSON.stringify(val)).map(item => {\n          item.size = item.size && createSize(BMap, item.size)\n          return item\n        })\n        originInstance.setStyles(obj)\n      },\n      deep: true\n    },\n    averageCenter (val) {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, gridSize, minClusterSize, maxZoom, styles, averageCenter} = this\n      this.originInstance = new MarkerClusterer(map, {\n        gridSize: gridSize && createSize(BMap, gridSize),\n        maxZoom,\n        minClusterSize: minClusterSize && createSize(BMap, minClusterSize),\n        styles: styles.map(item => {\n          item.size = createSize(BMap, item.size)\n          return item\n        }),\n        isAverageCenter: averageCenter\n      })\n      this.$nextTick(() => {\n        const markers = this.$children.map(inst => inst.originInstance).filter(marker => marker instanceof BMap.Marker)\n        this.originInstance.addMarkers(markers)\n      })\n    }\n  },\n  beforeCreate () {\n    this.preventChildrenRender = true\n  }\n}\n",{"version":3,"sources":["MarkerClusterer.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MarkerClusterer.vue","sourceRoot":"node_modules/vue-baidu-map/components/extra","sourcesContent":["<template>\n<span>\n  <slot></slot>\n</span>\n</template>\n\n<script>\nimport MarkerClusterer from 'bmaplib.markerclusterer'\nimport {createSize} from '../base/factory.js'\nimport commonMixin from '../base/mixins/common.js'\n\nexport default {\n  name: 'bml-marker-clusterer',\n  mixins: [commonMixin('markerClusterer')],\n  props: {\n    gridSize: {\n      type: Object\n    },\n    maxZoom: {\n      type: Number\n    },\n    minClusterSize: {\n      type: Number\n    },\n    styles: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    averageCenter: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    gridSize: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        originInstance.setGridSize(BMap, val.map)\n      },\n      deep: true\n    },\n    maxZoom (val) {\n      const {originInstance} = this\n      originInstance.setMaxZoom(val)\n    },\n    minClusterSize: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        originInstance.setMinClusterSize(createSize(BMap, val))\n      },\n      deep: true\n    },\n    styles: {\n      handler (val) {\n        const {BMap, originInstance} = this\n        const obj = JSON.parse(JSON.stringify(val)).map(item => {\n          item.size = item.size && createSize(BMap, item.size)\n          return item\n        })\n        originInstance.setStyles(obj)\n      },\n      deep: true\n    },\n    averageCenter (val) {\n      this.reload()\n    }\n  },\n  methods: {\n    load () {\n      const {BMap, map, gridSize, minClusterSize, maxZoom, styles, averageCenter} = this\n      this.originInstance = new MarkerClusterer(map, {\n        gridSize: gridSize && createSize(BMap, gridSize),\n        maxZoom,\n        minClusterSize: minClusterSize && createSize(BMap, minClusterSize),\n        styles: styles.map(item => {\n          item.size = createSize(BMap, item.size)\n          return item\n        }),\n        isAverageCenter: averageCenter\n      })\n      this.$nextTick(() => {\n        const markers = this.$children.map(inst => inst.originInstance).filter(marker => marker instanceof BMap.Marker)\n        this.originInstance.addMarkers(markers)\n      })\n    }\n  },\n  beforeCreate () {\n    this.preventChildrenRender = true\n  }\n}\n</script>\n"]}]}