{"remainingRequest":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\node\\node.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-task-node\\src\\lib\\components\\node\\node.vue","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\项目\\FoodProductManageSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mixinsTool from '../../mixins/tool'\nconst prefixCls = 'task-node'\nexport default {\n  name: 'Node',\n  mixins: [ mixinsTool ],\n  data () {\n    return {\n      store: null\n    }\n  },\n  props: {\n    width: {\n      type: [String, Number],\n      default: 0\n    },\n    height: {\n      type: [String, Number],\n      default: 0\n    },\n    node: {\n      id: [String, Number],\n      positionX: {\n        type: [String, Number],\n        default: 0\n      },\n      positionY: {\n        type: [String, Number],\n        default: 0\n      }\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`\n      ]\n    }\n  },\n  methods: {\n    getCheckX (X) { // 检查是否移出工作区\n      let me = this\n      let x = X\n      if (x <= 0) {\n        x = 0\n        me.node.positionX = x\n      } else if (x >= me.getBrowserHW().width) {\n        x = me.getBrowserHW().width - me.width\n        me.node.positionX = x\n      }\n      return x\n    },\n    getCheckY (Y) { // 检查是否移出工作区\n      let me = this\n      let y = Y\n      if (y <= 0) {\n        y = 0\n        me.node.positionY = y\n      } else if (y >= me.getBrowserHW().height) {\n        y = me.getBrowserHW().height - me.height\n        me.node.positionY = y\n      }\n      return y\n    },\n    dragStart: function (event) {\n      event.dataTransfer.setData('nodedata', JSON.stringify(this.node))\n      this.$emit('on-drag-start', event, this.node)\n    },\n    dragGing: function (event) {\n      this.$emit('on-drag-ging', event)\n    },\n    dragEnd: function (event, node) {\n      this.$emit('on-drag-end', event, node)\n    },\n    mouseMenu: function (event) {\n      event.stopPropagation()\n      this.$emit('on-mouse', event, this.node)\n    },\n    selectNodeMethod: function (event, node, ref) {\n      this.$emit('on-select', event, node, ref)\n    }\n  },\n  updated: function () {\n    this.$emit('updateTem', 'VDom加载完成！')\n  }\n}\n",{"version":3,"sources":["node.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"node.vue","sourceRoot":"node_modules/vue-task-node/src/lib/components/node","sourcesContent":["<template>\n  <g :transform=\"'translate('+getCheckX(node.positionX)+','+getCheckY(node.positionY)+')'\" :class=\"classes\">\n    <g transform=\"scale(1,1)\" class=\"pane-scalable\">\n      <foreignObject :width=\"width\" :height=\"height\">\n        <body xmlns=\"http://www.w3.org/1999/xhtml\">\n            <div @click=selectNodeMethod($event,node,$refs.node) ref=\"node\" draggable=\"true\" @drag='dragGing($event)' @dragstart='dragStart($event)' @dragend=\"dragEnd($event,node)\" @contextmenu.prevent=\"mouseMenu\">\n              <slot></slot>\n            </div>\n        </body>\n      </foreignObject>\n    </g>\n  </g>\n</template>\n<script>\nimport mixinsTool from '../../mixins/tool'\nconst prefixCls = 'task-node'\nexport default {\n  name: 'Node',\n  mixins: [ mixinsTool ],\n  data () {\n    return {\n      store: null\n    }\n  },\n  props: {\n    width: {\n      type: [String, Number],\n      default: 0\n    },\n    height: {\n      type: [String, Number],\n      default: 0\n    },\n    node: {\n      id: [String, Number],\n      positionX: {\n        type: [String, Number],\n        default: 0\n      },\n      positionY: {\n        type: [String, Number],\n        default: 0\n      }\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`\n      ]\n    }\n  },\n  methods: {\n    getCheckX (X) { // 检查是否移出工作区\n      let me = this\n      let x = X\n      if (x <= 0) {\n        x = 0\n        me.node.positionX = x\n      } else if (x >= me.getBrowserHW().width) {\n        x = me.getBrowserHW().width - me.width\n        me.node.positionX = x\n      }\n      return x\n    },\n    getCheckY (Y) { // 检查是否移出工作区\n      let me = this\n      let y = Y\n      if (y <= 0) {\n        y = 0\n        me.node.positionY = y\n      } else if (y >= me.getBrowserHW().height) {\n        y = me.getBrowserHW().height - me.height\n        me.node.positionY = y\n      }\n      return y\n    },\n    dragStart: function (event) {\n      event.dataTransfer.setData('nodedata', JSON.stringify(this.node))\n      this.$emit('on-drag-start', event, this.node)\n    },\n    dragGing: function (event) {\n      this.$emit('on-drag-ging', event)\n    },\n    dragEnd: function (event, node) {\n      this.$emit('on-drag-end', event, node)\n    },\n    mouseMenu: function (event) {\n      event.stopPropagation()\n      this.$emit('on-mouse', event, this.node)\n    },\n    selectNodeMethod: function (event, node, ref) {\n      this.$emit('on-select', event, node, ref)\n    }\n  },\n  updated: function () {\n    this.$emit('updateTem', 'VDom加载完成！')\n  }\n}\n</script>\n"]}]}